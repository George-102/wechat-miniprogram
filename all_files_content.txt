

===== all_files_content.txt =====

﻿


===== project.config.json =====

{
  "miniprogramRoot": "miniprogram/",
  "cloudfunctionRoot": "cloud/functions/",
  "setting": {
    "urlCheck": false,
    "es6": true,
    "enhance": true,
    "postcss": true,
    "preloadBackgroundData": false,
    "minified": true,
    "newFeature": true,
    "coverView": true,
    "nodeModules": false,
    "autoAudits": false,
    "showShadowRootInWxmlPanel": true,
    "scopeDataCheck": false,
    "uglifyFileName": false,
    "checkInvalidKey": true,
    "checkSiteMap": true,
    "uploadWithSourceMap": true,
    "compileHotReLoad": false,
    "useMultiFrameRuntime": true,
    "useApiHook": true,
    "babelSetting": {
      "ignore": [],
      "disablePlugins": [],
      "outputPath": ""
    },
    "enableEngineNative": false,
    "bundle": false,
    "useIsolateContext": true,
    "useCompilerModule": true,
    "userConfirmedUseCompilerModuleSwitch": false,
    "packNpmManually": false,
    "packNpmRelationList": []
  },
  "appid": "wxef74c889fa1ecce4",
  "projectname": "高端社交小程序",
  "libVersion": "2.19.4",
  "cloudfunctionTemplateRoot": "",
  "condition": {}
}

===== project.private.config.json =====

{
  "condition": {
    "miniprogram": {
      "list": [
        {
          "name": "pages/login-test/index",
          "pathName": "pages/login-test/index",
          "query": "",
          "scene": null,
          "launchMode": "default"
        },
        {
          "name": "pages/message/index",
          "pathName": "pages/message/index",
          "query": "",
          "launchMode": "default",
          "scene": null
        },
        {
          "name": "pages/posts/index",
          "pathName": "pages/posts/index",
          "query": "",
          "launchMode": "default",
          "scene": null
        },
        {
          "name": "pages/auth/index",
          "pathName": "pages/auth/index",
          "query": "",
          "launchMode": "default",
          "scene": null
        },
        {
          "name": "pages/debug-user/index",
          "pathName": "pages/debug-user/index",
          "query": "",
          "launchMode": "default",
          "scene": null
        }
      ]
    }
  }
}

===== README.md =====



===== cloud\functions\auth\index.js =====

const cloud = require('wx-server-sdk')
cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV
})

const db = cloud.database()
const _ = db.command

exports.main = async (event) => {
  const { action, code, userInfo: clientUserInfo, schoolInfo } = event;
  const wxContext = cloud.getWXContext()
  const { OPENID: openid, APPID: appid } = wxContext

  console.log('Auth云函数被调用:', { action, openid, appid, hasUserInfo: !!clientUserInfo, hasCode: !!code, schoolInfo })

  try {
    if (!action) {
      throw new Error('未指定操作类型 (action)')
    }

    switch (action) {
      case 'login': {
        console.log('开始处理登录请求，OpenID:', openid)

        if (!openid) {
          throw new Error('无法获取用户OpenID，用户登录态异常')
        }

        let userRes
        try {
          userRes = await db.collection('users').where({
            _openid: openid
          }).get()
          console.log('用户查询完成，是否存在:', userRes.data.length > 0)
        } catch (dbError) {
          console.error('数据库查询失败:', dbError)
          userRes = { data: [] }
        }

        let userData

        // 处理新用户
        if (userRes.data.length === 0) {
          console.log('创建新用户记录')
          
          // 构建基础用户信息
          const baseUserInfo = {
            _openid: openid,
            avatarUrl: clientUserInfo ? clientUserInfo.avatarUrl : '/images/default-avatar.png',
            nickName: clientUserInfo ? clientUserInfo.nickName : `用户${openid.slice(-6)}`,
            gender: clientUserInfo ? clientUserInfo.gender : 0,
            country: clientUserInfo ? clientUserInfo.country : '',
            province: clientUserInfo ? clientUserInfo.province : '',
            city: clientUserInfo ? clientUserInfo.city : '',
            language: clientUserInfo ? clientUserInfo.language : 'zh_CN',
          }

          // 添加学校认证信息
          const schoolAuthInfo = schoolInfo ? {
            // 学校认证相关字段
            schoolName: schoolInfo.schoolName || '',
            studentId: schoolInfo.studentId || '',
            verificationStatus: schoolInfo ? 'pending' : 'unverified', // pending, verified, rejected
            verificationType: schoolInfo?.verificationType || '', // studentCard, admissionLetter, etc.
            verificationTime: schoolInfo ? db.serverDate() : null,
            // 学校隔离相关
            schoolCode: schoolInfo?.schoolCode || '',
          } : {
            verificationStatus: 'unverified',
            schoolName: '',
            studentId: '',
          }

          const newUser = {
            ...baseUserInfo,
            ...schoolAuthInfo,
            // 用户等级和经验系统
            bio: '欢迎来到校园社交平台！',
            level: 1,
            levelName: '小学生',
            exp: 0,
            nextLevelExp: 100,
            // 统计信息
            postCount: 0,
            likeCount: 0,
            followerCount: 0,
            followingCount: 0,
            // 金币系统
            balance: 0,
            goldCoins: 0,
            // 时间信息
            createTime: db.serverDate(),
            lastLoginTime: db.serverDate(),
            updateTime: db.serverDate(),
            dailyLoginTime: db.serverDate(), // 用于每日登录奖励
            status: 'active'
          }

          try {
            const addRes = await db.collection('users').add({
              data: newUser
            })
            console.log('新用户创建成功，数据库ID:', addRes._id)
            userData = { ...newUser, _id: addRes._id }
          } catch (createError) {
            console.error('创建用户记录失败:', createError)
            throw new Error(`创建用户失败: ${createError.message}`)
          }
        } else {
          // 处理老用户
          console.log('用户已存在，更新最后登录时间')
          userData = userRes.data[0]
          
          const updateData = {
            lastLoginTime: db.serverDate(),
            updateTime: db.serverDate()
          }
          
          // 检查每日登录奖励
          const lastLogin = userData.lastLoginTime;
          const now = new Date();
          const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
          const lastLoginDate = lastLogin ? new Date(lastLogin) : null;
          
          if (!lastLoginDate || lastLoginDate < today) {
            // 每日登录奖励
            updateData.exp = _.inc(5); // 每日登录获得5经验
            updateData.dailyLoginTime = db.serverDate();
            console.log('发放每日登录奖励：5经验');
          }
          
          // 如果提供了新的用户信息，则更新
          if (clientUserInfo) {
            console.log('检测到新的用户信息，更新资料')
            updateData.avatarUrl = clientUserInfo.avatarUrl
            updateData.nickName = clientUserInfo.nickName
            updateData.gender = clientUserInfo.gender
            updateData.country = clientUserInfo.country
            updateData.province = clientUserInfo.province
            updateData.city = clientUserInfo.city
            updateData.language = clientUserInfo.language
          }
          
          // 如果有学校信息，更新学校认证状态
          if (schoolInfo) {
            updateData.schoolName = schoolInfo.schoolName
            updateData.studentId = schoolInfo.studentId
            updateData.verificationStatus = 'pending'
            updateData.verificationType = schoolInfo.verificationType
            updateData.verificationTime = db.serverDate()
            updateData.schoolCode = schoolInfo.schoolCode
          }
          
          try {
            await db.collection('users').where({
              _openid: openid
            }).update({
              data: updateData
            })
            console.log('用户信息更新成功')
            // 将更新的数据合并到返回结果中
            userData = { ...userData, ...updateData }
          } catch (updateError) {
            console.error('更新用户信息失败:', updateError)
          }
        }

        console.log('登录流程完成，返回用户数据')
        return {
          success: true,
          data: {
            userInfo: userData
          }
        }
      }

      case 'verifySchool': {
        // 学校认证验证逻辑
        const { schoolName, studentId, verificationType, schoolCode } = event;
        
        // 这里可以添加学校认证的实际验证逻辑
        // 比如调用学校API验证学号等
        
        const verificationResult = {
          verified: true, // 模拟验证通过
          message: '认证信息已提交，等待审核'
        };
        
        // 更新用户认证状态
        await db.collection('users').where({
          _openid: openid
        }).update({
          data: {
            schoolName,
            studentId,
            verificationType,
            schoolCode,
            verificationStatus: 'pending',
            verificationTime: db.serverDate(),
            updateTime: db.serverDate()
          }
        });
        
        return {
          success: true,
          data: verificationResult
        };
      }

      default:
        console.error('未知的操作类型:', action)
        return {
          success: false,
          message: `未知操作: ${action}`
        }
    }
  } catch (error) {
    console.error('Auth云函数执行异常:', error)
    return {
      success: false,
      message: error.message
    }
  }
}

===== cloud\functions\auth\package.json =====

{
  "name": "auth",
  "version": "1.0.0",
  "description": "用户认证相关云函数",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "wx-server-sdk": "~2.6.3"
  },
  "author": "",
  "license": "ISC"
}

===== cloud\functions\comment\index.js =====

const cloud = require('wx-server-sdk')
cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV
})

const db = cloud.database()
const _ = db.command

exports.main = async (event) => {
  const { action } = event
  const wxContext = cloud.getWXContext()
  const { OPENID: openid } = wxContext

  try {
    switch (action) {
      case 'getComments': {
        const { postId, page = 1, pageSize = 10 } = event
        
        // 获取顶级评论
        const commentsRes = await db.collection('comments')
          .where({
            postId: postId,
            parentId: ''
          })
          .orderBy('createTime', 'desc')
          .skip((page - 1) * pageSize)
          .limit(pageSize)
          .get()

        // 获取评论的用户信息和回复
        const commentsWithDetails = await Promise.all(commentsRes.data.map(async comment => {
          // 获取评论用户信息
          const userRes = await db.collection('users').where({
            _openid: comment._openid
          }).get()

          // 获取点赞状态
          const likeRes = await db.collection('comment_likes').where({
            commentId: comment._id,
            openid: openid
          }).get()

          // 获取回复
          const repliesRes = await db.collection('comments')
            .where({
              parentId: comment._id
            })
            .orderBy('createTime', 'asc')
            .get()

          // 获取回复的用户信息
          const repliesWithUser = await Promise.all(repliesRes.data.map(async reply => {
            const replyUserRes = await db.collection('users').where({
              _openid: reply._openid
            }).get()

            return {
              ...reply,
              authorName: replyUserRes.data[0]?.nickName || '匿名用户',
              authorAvatar: replyUserRes.data[0]?.avatarUrl || ''
            }
          }))

          return {
            ...comment,
            authorName: userRes.data[0]?.nickName || '匿名用户',
            authorAvatar: userRes.data[0]?.avatarUrl || '',
            isLiked: likeRes.data.length > 0,
            replies: repliesWithUser
          }
        }))

        return {
          success: true,
          data: {
            comments: commentsWithDetails,
            hasMore: commentsRes.data.length === pageSize
          }
        }
      }

      case 'createComment': {
        const { postId, content, replyTo = '', replyToName = '' } = event
        
        const commentData = {
          _openid: openid,
          postId: postId,
          content: content,
          parentId: replyTo, // 空字符串表示顶级评论
          replyToName: replyToName,
          likeCount: 0,
          createTime: db.serverDate()
        }

        // 创建评论
        const res = await db.collection('comments').add({
          data: commentData
        })

        // 更新帖子评论数
        await db.collection('posts').doc(postId).update({
          data: {
            commentCount: _.inc(1)
          }
        })

        // 发送评论消息
        if (replyTo) {
          // 回复评论，通知被回复者
          const parentComment = await db.collection('comments').doc(replyTo).get()
          if (parentComment.data && parentComment.data._openid !== openid) {
            await cloud.callFunction({
              name: 'message',
              data: {
                action: 'create',
                type: 'comment_reply',
                toOpenid: parentComment.data._openid,
                relatedId: postId,
                content: '回复了你的评论'
              }
            })
          }
        } else {
          // 评论帖子，通知帖子作者
          const postRes = await db.collection('posts').doc(postId).get()
          if (postRes.data && postRes.data._openid !== openid) {
            await cloud.callFunction({
              name: 'message',
              data: {
                action: 'create',
                type: 'comment',
                toOpenid: postRes.data._openid,
                relatedId: postId,
                content: '评论了你的帖子'
              }
            })
          }
        }

        return {
          success: true,
          data: {
            commentId: res._id
          }
        }
      }

      case 'likeComment': {
        const { commentId, isLiked } = event
        
        if (isLiked) {
          // 点赞评论
          await db.collection('comment_likes').add({
            data: {
              commentId: commentId,
              openid: openid,
              createTime: db.serverDate()
            }
          })

          await db.collection('comments').doc(commentId).update({
            data: {
              likeCount: _.inc(1)
            }
          })

          // 发送点赞消息
          const commentRes = await db.collection('comments').doc(commentId).get()
          if (commentRes.data && commentRes.data._openid !== openid) {
            await cloud.callFunction({
              name: 'message',
              data: {
                action: 'create',
                type: 'comment_like',
                toOpenid: commentRes.data._openid,
                relatedId: commentRes.data.postId,
                content: '点赞了你的评论'
              }
            })
          }
        } else {
          // 取消点赞评论
          await db.collection('comment_likes').where({
            commentId: commentId,
            openid: openid
          }).remove()

          await db.collection('comments').doc(commentId).update({
            data: {
              likeCount: _.inc(-1)
            }
          })
        }

        return {
          success: true
        }
      }

      default:
        return {
          success: false,
          message: '未知操作'
        }
    }
  } catch (error) {
    console.error('Comment云函数错误:', error)
    return {
      success: false,
      message: error.message
    }
  }
}

===== cloud\functions\comment\package.json =====

{
  "name": "comment",
  "version": "1.0.0",
  "description": "评论相关云函数",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "wx-server-sdk": "~2.6.3"
  },
  "author": "",
  "license": "ISC"
}

===== cloud\functions\message\index.js =====

const cloud = require('wx-server-sdk')
cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV
})

const db = cloud.database()
const _ = db.command

exports.main = async (event) => {
  const { action } = event
  const wxContext = cloud.getWXContext()
  const { OPENID: openid } = wxContext

  try {
    switch (action) {
      case 'getMessages': {
        const { type = 'all', page = 1, pageSize = 15 } = event
        
        let query = db.collection('messages').where({
          toOpenid: openid
        })

        // 根据类型过滤
        if (type === 'unread') {
          query = query.where({ isRead: false })
        } else if (type === 'system') {
          query = query.where({ type: 'system' })
        }

        const res = await query
          .orderBy('createTime', 'desc')
          .skip((page - 1) * pageSize)
          .limit(pageSize)
          .get()

        // 获取发送者信息
        const messagesWithSender = await Promise.all(res.data.map(async message => {
          if (message.fromOpenid && message.fromOpenid !== 'system') {
            const userRes = await db.collection('users').where({
              _openid: message.fromOpenid
            }).get()
            return {
              ...message,
              senderName: userRes.data[0]?.nickName || '未知用户',
              senderAvatar: userRes.data[0]?.avatarUrl || ''
            }
          }
          return message
        }))

        return {
          success: true,
          data: {
            messages: messagesWithSender,
            hasMore: res.data.length === pageSize
          }
        }
      }

      case 'getUnreadCount': {
        const res = await db.collection('messages').where({
          toOpenid: openid,
          isRead: false
        }).count()

        return {
          success: true,
          data: {
            count: res.total
          }
        }
      }

      case 'create': {
        const { type, toOpenid, relatedId = '', content } = event
        
        // 获取发送者信息
        const fromUserRes = await db.collection('users').where({
          _openid: openid
        }).get()

        const messageData = {
          fromOpenid: openid,
          toOpenid: toOpenid,
          type: type,
          relatedId: relatedId,
          title: getMessageTitle(type, fromUserRes.data[0]?.nickName),
          content: content,
          isRead: false,
          createTime: db.serverDate()
        }

        await db.collection('messages').add({
          data: messageData
        })

        return {
          success: true
        }
      }

      case 'markAsRead': {
        const { messageId } = event
        
        await db.collection('messages').doc(messageId).update({
          data: {
            isRead: true,
            readTime: db.serverDate()
          }
        })

        return {
          success: true
        }
      }

      case 'deleteMessage': {
        const { messageId } = event
        
        await db.collection('messages').doc(messageId).remove()

        return {
          success: true
        }
      }

      case 'clearAllMessages': {
        const res = await db.collection('messages').where({
          toOpenid: openid
        }).get()

        const deletePromises = res.data.map(msg => {
          return db.collection('messages').doc(msg._id).remove()
        })

        await Promise.all(deletePromises)

        return {
          success: true
        }
      }

      default:
        return {
          success: false,
          message: '未知操作'
        }
    }
  } catch (error) {
    console.error('Message云函数错误:', error)
    return {
      success: false,
      message: error.message
    }
  }
}

// 根据消息类型生成标题
function getMessageTitle(type, fromUserName) {
  const titles = {
    'like': `${fromUserName} 点赞了你的帖子`,
    'comment': `${fromUserName} 评论了你的帖子`,
    'comment_reply': `${fromUserName} 回复了你的评论`,
    'comment_like': `${fromUserName} 点赞了你的评论`,
    'follow': `${fromUserName} 关注了你`,
    'system': '系统通知'
  }
  return titles[type] || '新消息'
}

===== cloud\functions\message\package.json =====

{
  "name": "message",
  "version": "1.0.0",
  "description": "消息相关云函数",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "wx-server-sdk": "~2.6.3"
  },
  "author": "",
  "license": "ISC"
}

===== cloud\functions\payment\index.js =====

const cloud = require('wx-server-sdk')
cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV
})

const db = cloud.database()
const _ = db.command

exports.main = async (event) => {
  const { action } = event
  const wxContext = cloud.getWXContext()
  const { OPENID: openid } = wxContext

  try {
    switch (action) {
      case 'unifiedOrder': {
        const { orderId, amount, description } = event
        
        // 创建订单记录
        const orderData = {
          _openid: openid,
          orderId: orderId,
          amount: amount,
          description: description,
          status: 'pending',
          createTime: db.serverDate(),
          expireTime: new Date(Date.now() + 15 * 60 * 1000) // 15分钟后过期
        }

        await db.collection('orders').add({
          data: orderData
        })

        // 这里应该调用微信支付接口生成支付参数
        // 由于需要商户号等配置，这里返回模拟数据
        const paymentData = {
          timeStamp: Math.floor(Date.now() / 1000).toString(),
          nonceStr: Math.random().toString(36).substr(2, 15),
          package: `prepay_id=模拟预支付ID_${orderId}`,
          signType: 'MD5',
          paySign: '模拟签名'
        }

        return {
          success: true,
          data: paymentData
        }
      }

      case 'balancePayment': {
        const { orderId } = event
        
        // 检查用户余额
        const userRes = await db.collection('users').where({ 
          _openid: openid 
        }).get()
        
        const orderRes = await db.collection('orders').where({ 
          orderId: orderId 
        }).get()

        if (userRes.data.length === 0 || orderRes.data.length === 0) {
          throw new Error('用户或订单不存在')
        }

        const user = userRes.data[0]
        const order = orderRes.data[0]

        // 模拟余额检查
        const balance = user.balance || 0
        if (balance < order.amount) {
          throw new Error('余额不足')
        }

        // 更新订单状态
        await db.collection('orders').where({ 
          orderId: orderId 
        }).update({
          data: {
            status: 'paid',
            payTime: db.serverDate()
          }
        })

        // 更新用户余额
        await db.collection('users').where({ 
          _openid: openid 
        }).update({
          data: {
            balance: _.inc(-order.amount)
          }
        })

        return {
          success: true
        }
      }

      case 'alipayPayment': {
        // 支付宝支付（模拟）
        return {
          success: false,
          message: '暂不支持支付宝支付'
        }
      }

      case 'checkOrderStatus': {
        const { orderId } = event
        
        const orderRes = await db.collection('orders').where({
          orderId: orderId
        }).get()

        if (orderRes.data.length === 0) {
          throw new Error('订单不存在')
        }

        return {
          success: true,
          data: {
            status: orderRes.data[0].status
          }
        }
      }

      default:
        return {
          success: false,
          message: '未知操作'
        }
    }
  } catch (error) {
    console.error('Payment云函数错误:', error)
    return {
      success: false,
      message: error.message
    }
  }
}

===== cloud\functions\payment\package.json =====

{
  "name": "payment",
  "version": "1.0.0",
  "description": "支付相关云函数",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "wx-server-sdk": "~2.6.3"
  },
  "author": "",
  "license": "ISC"
}

===== cloud\functions\post\index.js =====

const cloud = require('wx-server-sdk')
cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV
})

const db = cloud.database()
const _ = db.command

exports.main = async (event) => {
  const { action } = event
  const wxContext = cloud.getWXContext()
  const { OPENID: openid } = wxContext

  try {
    switch (action) {
      case 'getPosts': {
        const { category = 'all', page = 1, pageSize = 10 } = event
        
        let query = db.collection('posts').where({
          status: 'published'
        })

        // 分类过滤
        if (category !== 'all') {
          if (category === 'hot') {
            query = query.orderBy('likeCount', 'desc').orderBy('commentCount', 'desc')
          } else if (category === 'follow') {
            // 获取关注用户的帖子
            const followRes = await db.collection('follows').where({
              followerOpenid: openid
            }).get()
            
            const followOpenids = followRes.data.map(item => item.followedOpenid)
            followOpenids.push(openid) // 包括自己的帖子
            
            query = query.where({
              _openid: _.in(followOpenids)
            })
          } else {
            query = query.where({
              tag: category
            })
          }
        }

        // 执行查询
        const res = await query
          .orderBy('createTime', 'desc')
          .skip((page - 1) * pageSize)
          .limit(pageSize)
          .get()

        // 获取用户信息
        const postsWithUser = await Promise.all(res.data.map(async post => {
          const userRes = await db.collection('users').where({
            _openid: post._openid
          }).get()
          
          const likeRes = await db.collection('likes').where({
            postId: post._id,
            openid: openid
          }).get()

          const collectRes = await db.collection('collects').where({
            postId: post._id,
            openid: openid
          }).get()

          return {
            ...post,
            authorName: userRes.data[0]?.nickName || '匿名用户',
            authorAvatar: userRes.data[0]?.avatarUrl || '',
            isLiked: likeRes.data.length > 0,
            isCollected: collectRes.data.length > 0
          }
        }))

        return {
          success: true,
          data: {
            posts: postsWithUser,
            hasMore: res.data.length === pageSize
          }
        }
      }

      case 'getPostDetail': {
        const { postId } = event
        
        // 获取帖子详情
        const postRes = await db.collection('posts').doc(postId).get()
        if (!postRes.data) {
          throw new Error('帖子不存在')
        }

        // 增加浏览量
        await db.collection('posts').doc(postId).update({
          data: {
            viewCount: _.inc(1)
          }
        })

        // 获取用户信息
        const userRes = await db.collection('users').where({
          _openid: postRes.data._openid
        }).get()

        // 检查点赞和收藏状态
        const likeRes = await db.collection('likes').where({
          postId: postId,
          openid: openid
        }).get()

        const collectRes = await db.collection('collects').where({
          postId: postId,
          openid: openid
        }).get()

        const postDetail = {
          ...postRes.data,
          authorName: userRes.data[0]?.nickName || '匿名用户',
          authorAvatar: userRes.data[0]?.avatarUrl || '',
          authorId: userRes.data[0]?._id,
          isLiked: likeRes.data.length > 0,
          isCollected: collectRes.data.length > 0
        }

        return {
          success: true,
          data: postDetail
        }
      }

      case 'create': {
        const { content, images = [], tag = 'share', location = '', isAnonymous = false } = event
        
        const postData = {
          _openid: openid,
          content: content,
          images: images,
          tag: tag,
          location: location,
          isAnonymous: isAnonymous,
          likeCount: 0,
          commentCount: 0,
          viewCount: 0,
          shareCount: 0,
          status: 'published',
          createTime: db.serverDate(),
          updateTime: db.serverDate()
        }

        // 创建帖子
        const res = await db.collection('posts').add({
          data: postData
        })

        // 更新用户发帖数
        await db.collection('users').where({
          _openid: openid
        }).update({
          data: {
            postCount: _.inc(1)
          }
        })

        return {
          success: true,
          data: {
            postId: res._id
          }
        }
      }

      case 'likePost': {
        const { postId, isLiked } = event
        
        if (isLiked) {
          // 点赞
          await db.collection('likes').add({
            data: {
              postId: postId,
              openid: openid,
              createTime: db.serverDate()
            }
          })

          await db.collection('posts').doc(postId).update({
            data: {
              likeCount: _.inc(1)
            }
          })

          // 发送点赞消息
          const postRes = await db.collection('posts').doc(postId).get()
          if (postRes.data && postRes.data._openid !== openid) {
            await cloud.callFunction({
              name: 'message',
              data: {
                action: 'create',
                type: 'like',
                toOpenid: postRes.data._openid,
                relatedId: postId,
                content: '点赞了你的帖子'
              }
            })
          }
        } else {
          // 取消点赞
          await db.collection('likes').where({
            postId: postId,
            openid: openid
          }).remove()

          await db.collection('posts').doc(postId).update({
            data: {
              likeCount: _.inc(-1)
            }
          })
        }

        return {
          success: true
        }
      }

      case 'collectPost': {
        const { postId, isCollected } = event
        
        if (isCollected) {
          // 收藏
          await db.collection('collects').add({
            data: {
              postId: postId,
              openid: openid,
              createTime: db.serverDate()
            }
          })
        } else {
          // 取消收藏
          await db.collection('collects').where({
            postId: postId,
            openid: openid
          }).remove()
        }

        return {
          success: true
        }
      }

      case 'reportPost': {
        const { postId, reason = '' } = event
        
        await db.collection('reports').add({
          data: {
            postId: postId,
            reporterOpenid: openid,
            reason: reason,
            status: 'pending',
            createTime: db.serverDate()
          }
        })

        return {
          success: true,
          message: '举报成功，我们会尽快处理'
        }
      }

      default:
        return {
          success: false,
          message: '未知操作'
        }
    }
  } catch (error) {
    console.error('Post云函数错误:', error)
    return {
      success: false,
      message: error.message
    }
  }
}

===== cloud\functions\post\package.json =====

{
  "name": "post",
  "version": "1.0.0",
  "description": "帖子相关云函数",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "wx-server-sdk": "~2.6.3"
  },
  "author": "",
  "license": "ISC"
}

===== cloud\functions\search\index.js =====

const cloud = require('wx-server-sdk')
cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV
})

const db = cloud.database()
const _ = db.command

exports.main = async (event) => {
  const { action, keyword, type = 'post', page = 1, pageSize = 10 } = event
  const wxContext = cloud.getWXContext()
  const { OPENID: openid } = wxContext

  try {
    if (action !== 'search') {
      return {
        success: false,
        message: '未知操作'
      }
    }

    const skip = (page - 1) * pageSize

    switch (type) {
      case 'post': {
        // 搜索帖子
        const res = await db.collection('posts')
          .where({
            status: 'published',
            content: db.RegExp({
              regexp: keyword,
              options: 'i'
            })
          })
          .orderBy('createTime', 'desc')
          .skip(skip)
          .limit(pageSize)
          .get()

        // 获取用户信息
        const postsWithUser = await Promise.all(res.data.map(async post => {
          const userRes = await db.collection('users').where({
            _openid: post._openid
          }).get()

          const likeRes = await db.collection('likes').where({
            postId: post._id,
            openid: openid
          }).get()

          return {
            ...post,
            authorName: userRes.data[0]?.nickName || '匿名用户',
            authorAvatar: userRes.data[0]?.avatarUrl || '',
            isLiked: likeRes.data.length > 0
          }
        }))

        return {
          success: true,
          data: {
            results: postsWithUser,
            hasMore: res.data.length === pageSize
          }
        }
      }

      case 'user': {
        // 搜索用户
        const res = await db.collection('users')
          .where({
            nickName: db.RegExp({
              regexp: keyword,
              options: 'i'
            })
          })
          .skip(skip)
          .limit(pageSize)
          .get()

        // 检查关注状态
        const usersWithFollowStatus = await Promise.all(res.data.map(async user => {
          const followRes = await db.collection('follows').where({
            followerOpenid: openid,
            followedOpenid: user._openid
          }).get()

          return {
            ...user,
            isFollowing: followRes.data.length > 0
          }
        }))

        return {
          success: true,
          data: {
            results: usersWithFollowStatus,
            hasMore: res.data.length === pageSize
          }
        }
      }

      case 'tag': {
        // 搜索标签
        const tagRes = await db.collection('posts')
          .where({
            status: 'published',
            tag: db.RegExp({
              regexp: keyword,
              options: 'i'
            })
          })
          .count()

        // 获取相关帖子
        const postsRes = await db.collection('posts')
          .where({
            status: 'published',
            tag: db.RegExp({
              regexp: keyword,
              options: 'i'
            })
          })
          .orderBy('createTime', 'desc')
          .skip(skip)
          .limit(pageSize)
          .get()

        // 构建标签结果
        const tagResults = [{
          _id: `tag_${keyword}`,
          name: keyword,
          postCount: tagRes.total,
          isHot: tagRes.total > 100,
          type: 'tag'
        }]

        return {
          success: true,
          data: {
            results: tagResults,
            hasMore: false
          }
        }
      }

      default:
        return {
          success: false,
          message: '未知搜索类型'
        }
    }
  } catch (error) {
    console.error('Search云函数错误:', error)
    return {
      success: false,
      message: error.message
    }
  }
}

===== cloud\functions\search\package.json =====

{
  "name": "search",
  "version": "1.0.0",
  "description": "搜索相关云函数",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "wx-server-sdk": "~2.6.3"
  },
  "author": "",
  "license": "ISC"
}

===== cloud\functions\user\index.js =====

const cloud = require('wx-server-sdk')
cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV
})

const db = cloud.database()
const _ = db.command

exports.main = async (event) => {
  const { action } = event
  const wxContext = cloud.getWXContext()
  const { OPENID: openid } = wxContext

  console.log('User云函数被调用:', { action, openid })

  try {
    switch (action) {
      case 'getUserInfo': {
        console.log('获取用户信息，OpenID:', openid)
        
        const userRes = await db.collection('users').where({
          _openid: openid
        }).get()

        console.log('用户查询结果:', userRes)

        if (userRes.data.length === 0) {
          // 如果用户不存在，创建一个默认用户
          console.log('用户不存在，创建默认用户')
          const defaultUser = {
            _openid: openid,
            avatarUrl: '/images/default-avatar.png',
            nickName: '微信用户',
            gender: 0,
            bio: '这个人很懒，什么都没写~',
            level: 1,
            exp: 0,
            postCount: 0,
            likeCount: 0,
            followerCount: 0,
            followingCount: 0,
            balance: 0,
            createTime: db.serverDate(),
            lastLoginTime: db.serverDate(),
            status: 'active'
          }

          try {
            const addRes = await db.collection('users').add({
              data: defaultUser
            })
            console.log('默认用户创建成功:', addRes)
            return {
              success: true,
              data: { ...defaultUser, _id: addRes._id }
            }
          } catch (createError) {
            console.error('创建默认用户失败:', createError)
            throw new Error('用户不存在且创建失败: ' + createError.message)
          }
        }

        return {
          success: true,
          data: userRes.data[0]
        }
      }

      case 'getOrCreateUser': {
        const { userInfo } = event
        
        console.log('获取或创建用户:', { userInfo, openid })

        const userRes = await db.collection('users').where({
          _openid: openid
        }).get()

        let userData

        if (userRes.data.length === 0) {
          // 创建新用户
          const newUser = {
            _openid: openid,
            avatarUrl: userInfo?.avatarUrl || '/images/default-avatar.png',
            nickName: userInfo?.nickName || '微信用户',
            gender: userInfo?.gender || 0,
            country: userInfo?.country || '',
            province: userInfo?.province || '',
            city: userInfo?.city || '',
            language: userInfo?.language || 'zh_CN',
            bio: '这个人很懒，什么都没写~',
            level: 1,
            exp: 0,
            postCount: 0,
            likeCount: 0,
            followerCount: 0,
            followingCount: 0,
            balance: 0,
            createTime: db.serverDate(),
            lastLoginTime: db.serverDate(),
            updateTime: db.serverDate(),
            status: 'active'
          }

          const addRes = await db.collection('users').add({
            data: newUser
          })
          userData = { ...newUser, _id: addRes._id }
        } else {
          // 更新用户信息
          userData = userRes.data[0]
          await db.collection('users').where({
            _openid: openid
          }).update({
            data: {
              lastLoginTime: db.serverDate(),
              updateTime: db.serverDate(),
              ...(userInfo && {
                avatarUrl: userInfo.avatarUrl,
                nickName: userInfo.nickName,
                gender: userInfo.gender
              })
            }
          })
        }

        return {
          success: true,
          data: userData
        }
      }

      case 'updateUserInfo': {
        const { userInfo } = event
        
        await db.collection('users').where({
          _openid: openid
        }).update({
          data: {
            ...userInfo,
            updateTime: db.serverDate()
          }
        })

        return {
          success: true,
          message: '用户信息更新成功'
        }
      }

      default:
        return {
          success: false,
          message: '未知操作'
        }
    }
  } catch (error) {
    console.error('User云函数错误:', error)
    return {
      success: false,
      message: error.message
    }
  }
}

===== cloud\functions\user\package.json =====

{
  "name": "user",
  "version": "1.0.0",
  "description": "用户相关云函数",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "wx-server-sdk": "~2.6.3"
  },
  "author": "",
  "license": "ISC"
}

===== miniprogram\app.js =====

// app.js
App({
  onLaunch(options) {
    console.log('小程序初始化', options);
    
    // 检查新版本
    this.checkUpdate();
    
    // 初始化云开发
    this.initCloud();
    
    // 获取系统信息
    this.getSystemInfo();
    
    // 检查登录状态
    this.checkLoginStatus();
  },

  onShow(options) {
    console.log('小程序显示', options);
    
    // 更新用户状态
    this.updateUserStatus();
  },

  onHide() {
    console.log('小程序隐藏');
  },

  onError(error) {
    console.error('小程序错误:', error);
    // 错误上报
    this.reportError(error);
  },

  // 检查更新
  checkUpdate() {
    if (wx.canIUse('getUpdateManager')) {
      const updateManager = wx.getUpdateManager();
      
      updateManager.onCheckForUpdate((res) => {
        console.log('是否有新版本', res.hasUpdate);
      });

      updateManager.onUpdateReady(() => {
        wx.showModal({
          title: '更新提示',
          content: '新版本已准备好，是否重启应用？',
          success: (res) => {
            if (res.confirm) {
              updateManager.applyUpdate();
            }
          }
        });
      });

      updateManager.onUpdateFailed(() => {
        wx.showToast({
          title: '更新失败',
          icon: 'none'
        });
      });
    }
  },

  // 初始化云开发
  initCloud() {
    console.log('开始初始化云开发...');
    
    if (!wx.cloud) {
      console.error('请使用 2.2.3 或以上的基础库以使用云能力');
      wx.showModal({
        title: '提示',
        content: '当前微信版本过低，无法使用云能力，请升级到最新微信版本后重试。',
        showCancel: false
      });
      return;
    }

    try {
      // 方法1：使用具体的环境ID（推荐）
      wx.cloud.init({
        env: 'cloud1-3gaqjuvuf331ae24', 
        traceUser: true,
      });

      // 验证云开发是否初始化成功
      console.log('云开发初始化配置:', wx.cloud);
      console.log('云开发环境状态:', wx.cloud.constructor === Function);
      
      this.globalData.cloudInitialized = true;
      console.log('云开发初始化成功');
      
      // 测试云开发功能
      this.testCloudFunction();
      
    } catch (error) {
      console.error('云开发初始化失败:', error);
      this.globalData.cloudInitialized = false;
      
      wx.showToast({
        title: '云服务初始化失败',
        icon: 'none'
      });
    }
  },

  // 测试云函数调用
  async testCloudFunction() {
    try {
      console.log('测试云函数调用...');
      // 调用一个简单的云函数来验证
      const result = await wx.cloud.callFunction({
        name: 'user',
        data: {
          action: 'getUserInfo'
        }
      });
      console.log('云函数测试调用成功:', result);
    } catch (error) {
      console.log('云函数测试调用失败（可能是正常的，如果用户未登录）:', error);
    }
  },

  // 获取系统信息
  getSystemInfo() {
    try {
      wx.getSystemInfo({
        success: (res) => {
          this.globalData.systemInfo = res;
          this.globalData.statusBarHeight = res.statusBarHeight;
          
          // 设置自定义状态栏高度
          this.globalData.customNavHeight = res.statusBarHeight + 44;
          
          console.log('系统信息获取成功:', res);
          console.log('状态栏高度:', res.statusBarHeight);
          console.log('自定义导航栏高度:', this.globalData.customNavHeight);
        },
        fail: (error) => {
          console.error('获取系统信息失败:', error);
          // 设置默认值
          this.globalData.systemInfo = {};
          this.globalData.statusBarHeight = 20;
          this.globalData.customNavHeight = 64;
        }
      });
    } catch (error) {
      console.error('获取系统信息异常:', error);
    }
  },

  // 检查登录状态
  checkLoginStatus() {
    // 等待云开发初始化完成
    if (!this.globalData.cloudInitialized) {
      console.log('云开发未初始化，延迟检查登录状态');
      setTimeout(() => {
        this.checkLoginStatus();
      }, 1000);
      return;
    }

    const token = wx.getStorageSync('token');
    const userInfo = wx.getStorageSync('userInfo');
    
    console.log('检查登录状态:', { 
      hasToken: !!token, 
      hasUserInfo: !!userInfo,
      cloudInitialized: this.globalData.cloudInitialized 
    });
    
    if (token && userInfo) {
      this.globalData.userInfo = userInfo;
      this.globalData.isLoggedIn = true;
      console.log('用户已登录', userInfo);
    } else {
      this.globalData.isLoggedIn = false;
      this.globalData.userInfo = null;
      console.log('用户未登录');
    }
  },

  // 更新用户状态
  updateUserStatus() {
    if (this.globalData.isLoggedIn) {
      // 同步用户信息
      this.syncUserInfo();
    }
  },

  // 在 app.js 中添加全局登录状态监控
  watchLoginStatus() {
  // 监控存储变化
  wx.onStorageChanged && wx.onStorageChanged((res) => {
    if (res.key === 'userInfo' || res.key === 'token') {
      this.checkLoginStatus();
    }
  });
},

  // 同步用户信息
  async syncUserInfo() {
    try {
      // 调用云函数同步用户信息
      const result = await wx.cloud.callFunction({
        name: 'user',
        data: {
          action: 'getUserInfo'
        }
      });
      
      if (result.result && result.result.success) {
        this.globalData.userInfo = result.result.data;
        wx.setStorageSync('userInfo', result.result.data);
      }
    } catch (error) {
      console.error('同步用户信息失败:', error);
    }
  },

  // 错误上报
  reportError(error) {
    // 可以集成错误监控平台
    console.error('错误上报:', error);
    
    wx.reportAnalytics('error', {
      error: error.message || '未知错误',
      stack: error.stack || ''
    });
  },

  // 显示加载提示
  showLoading(title = '加载中...') {
    wx.showLoading({
      title: title,
      mask: true
    });
  },

  // 隐藏加载提示
  hideLoading() {
    wx.hideLoading();
  },

  // 显示成功提示
  showSuccess(message, duration = 1500) {
    wx.showToast({
      title: message,
      icon: 'success',
      duration: duration
    });
  },

  // 显示错误提示
  showError(message, duration = 2000) {
    wx.showToast({
      title: message,
      icon: 'none',
      duration: duration
    });
  },

  // 网络状态检查
  checkNetworkStatus() {
    return new Promise((resolve) => {
      wx.getNetworkType({
        success: (res) => {
          const networkType = res.networkType;
          this.globalData.networkType = networkType;
          resolve(networkType !== 'none');
        },
        fail: () => {
          resolve(false);
        }
      });
    });
  },

  // 全局数据
  globalData: {
    userInfo: null,
    isLoggedIn: false,
    systemInfo: null,
    statusBarHeight: 20,
    customNavHeight: 64,
    cloudInitialized: false,
    networkType: 'wifi',
    
    // 颜色配置
    colors: {
      primary: '#007AFF',
      success: '#34C759',
      warning: '#FF9500',
      danger: '#FF3B30',
      textPrimary: '#1A1A1A',
      textSecondary: '#666666',
      textTertiary: '#999999',
      background: '#F8F9FA',
      cardBackground: '#FFFFFF'
    },
    
    // 配置信息
    config: {
      appName: '高端社交',
      version: '1.0.0'
    }
  }
});

===== miniprogram\app.json =====

{
  "pages": [
    "pages/login-test/index",
    "pages/debug-user/index",
    "pages/test/index",
    "pages/auth/index",
    "pages/posts/index",
    "pages/search/index",
    "pages/message/index",
    "pages/profile/index",
    "pages/publish/index",
    "pages/post-detail/index",
    "pages/payment/index",
    "pages/auth/explain/index"
  ],
  "window": {
    "backgroundTextStyle": "dark",
    "navigationBarBackgroundColor": "#FFFFFF",
    "navigationBarTitleText": "高端社交",
    "navigationBarTextStyle": "black",
    "backgroundColor": "#F8F9FA",
    "enablePullDownRefresh": true,
    "onReachBottomDistance": 50,
    "navigationStyle": "custom"
  },
  "tabBar": {
    "color": "#999999",
    "selectedColor": "#007AFF",
    "backgroundColor": "#FFFFFF",
    "borderStyle": "white",
    "list": [
      {
        "pagePath": "pages/posts/index",
        "iconPath": "/images/tab/post-default.png",
        "selectedIconPath": "/images/tab/post-selected.png",
        "text": "首页"
      },
      {
        "pagePath": "pages/search/index",
        "iconPath": "/images/tab/search-default.png",
        "selectedIconPath": "/images/tab/search-selected.png",
        "text": "发现"
      },
      {
        "pagePath": "pages/message/index",
        "iconPath": "/images/tab/message-default.png",
        "selectedIconPath": "/images/tab/message-selected.png",
        "text": "消息"
      },
      {
        "pagePath": "pages/profile/index",
        "iconPath": "/images/tab/profile-default.png",
        "selectedIconPath": "/images/tab/profile-selected.png",
        "text": "我的"
      }
    ]
  },
  "networkTimeout": {
    "request": 10000,
    "downloadFile": 10000,
    "uploadFile": 10000,
    "connectSocket": 10000
  },
  "permission": {
    "scope.userLocation": {
      "desc": "你的位置信息将用于小程序位置接口的效果展示"
    }
  },
  "requiredPrivateInfos": [
    "getLocation"
  ],
  "usingComponents": {
    "post-card": "/components/post-card/post-card",
    "comment-list": "/components/comment-list/comment-list",
    "contact-button": "/components/contact-button/contact-button",
    "level-progress": "/components/level-progress/level-progress"
  },
  "style": "v2",
  "sitemapLocation": "sitemap.json",
  "lazyCodeLoading": "requiredComponents",
  "useExtendedLib": {
    "weui": true
  },
  "debug": false
}

===== miniprogram\app.wxss =====

/* app.wxss */

/* 重置样式 */
page {
  --primary-color: #007AFF;
  --success-color: #34C759;
  --warning-color: #FF9500;
  --danger-color: #FF3B30;
  --text-primary: #1A1A1A;
  --text-secondary: #666666;
  --text-tertiary: #999999;
  --background-color: #F8F9FA;
  --card-background: #FFFFFF;
  --border-color: #F0F0F0;
  
  background-color: var(--background-color);
  font-family: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', SimSun, sans-serif;
  line-height: 1.6;
  color: var(--text-primary);
}

/* 通用容器 */
.container {
  padding: 0 24rpx;
}

.safe-area {
  padding-bottom: env(safe-area-inset-bottom);
}

/* 卡片样式 */
.card {
  background: var(--card-background);
  border-radius: 20rpx;
  box-shadow: 0 8rpx 40rpx rgba(0, 0, 0, 0.06);
  margin: 20rpx 24rpx;
  padding: 32rpx;
  transition: all 0.3s ease;
}

.card:active {
  transform: translateY(-2rpx);
  box-shadow: 0 12rpx 50rpx rgba(0, 0, 0, 0.12);
}

/* 按钮样式 */
.btn {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 24rpx 48rpx;
  border-radius: 50rpx;
  font-size: 32rpx;
  font-weight: 600;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.btn:active {
  transform: scale(0.98);
}

.btn::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  transition: width 0.6s, height 0.6s;
}

.btn:active::after {
  width: 300rpx;
  height: 300rpx;
}

.btn-primary {
  background: linear-gradient(135deg, var(--primary-color) 0%, #5856D6 100%);
  color: white;
  box-shadow: 0 8rpx 32rpx rgba(0, 122, 255, 0.3);
}

.btn-secondary {
  background: linear-gradient(135deg, var(--success-color) 0%, #30D158 100%);
  color: white;
  box-shadow: 0 8rpx 32rpx rgba(52, 199, 89, 0.3);
}

.btn-outline {
  background: transparent;
  color: var(--primary-color);
  border: 2rpx solid var(--primary-color);
}

.btn-ghost {
  background: transparent;
  color: var(--text-secondary);
  border: 2rpx solid var(--border-color);
}

.btn-disabled {
  opacity: 0.5;
  pointer-events: none;
}

/* 文字样式 */
.text-primary {
  color: var(--text-primary);
}

.text-secondary {
  color: var(--text-secondary);
}

.text-tertiary {
  color: var(--text-tertiary);
}

.text-success {
  color: var(--success-color);
}

.text-warning {
  color: var(--warning-color);
}

.text-danger {
  color: var(--danger-color);
}

.text-center {
  text-align: center;
}

.text-left {
  text-align: left;
}

.text-right {
  text-align: right;
}

/* 字体大小 */
.font-xs {
  font-size: 24rpx;
}

.font-sm {
  font-size: 26rpx;
}

.font-base {
  font-size: 28rpx;
}

.font-lg {
  font-size: 32rpx;
}

.font-xl {
  font-size: 36rpx;
}

.font-2xl {
  font-size: 40rpx;
}

.font-3xl {
  font-size: 48rpx;
}

/* 字体粗细 */
.font-light {
  font-weight: 300;
}

.font-normal {
  font-weight: 400;
}

.font-medium {
  font-weight: 500;
}

.font-semibold {
  font-weight: 600;
}

.font-bold {
  font-weight: 700;
}

/* 间距 */
.m-0 { margin: 0; }
.m-1 { margin: 8rpx; }
.m-2 { margin: 16rpx; }
.m-3 { margin: 24rpx; }
.m-4 { margin: 32rpx; }
.m-5 { margin: 40rpx; }

.mt-0 { margin-top: 0; }
.mt-1 { margin-top: 8rpx; }
.mt-2 { margin-top: 16rpx; }
.mt-3 { margin-top: 24rpx; }
.mt-4 { margin-top: 32rpx; }
.mt-5 { margin-top: 40rpx; }

.mb-0 { margin-bottom: 0; }
.mb-1 { margin-bottom: 8rpx; }
.mb-2 { margin-bottom: 16rpx; }
.mb-3 { margin-bottom: 24rpx; }
.mb-4 { margin-bottom: 32rpx; }
.mb-5 { margin-bottom: 40rpx; }

.p-0 { padding: 0; }
.p-1 { padding: 8rpx; }
.p-2 { padding: 16rpx; }
.p-3 { padding: 24rpx; }
.p-4 { padding: 32rpx; }
.p-5 { padding: 40rpx; }

.pt-0 { padding-top: 0; }
.pt-1 { padding-top: 8rpx; }
.pt-2 { padding-top: 16rpx; }
.pt-3 { padding-top: 24rpx; }
.pt-4 { padding-top: 32rpx; }
.pt-5 { padding-top: 40rpx; }

.pb-0 { padding-bottom: 0; }
.pb-1 { padding-bottom: 8rpx; }
.pb-2 { padding-bottom: 16rpx; }
.pb-3 { padding-bottom: 24rpx; }
.pb-4 { padding-bottom: 32rpx; }
.pb-5 { padding-bottom: 40rpx; }

/* 布局 */
.flex {
  display: flex;
}

.flex-col {
  flex-direction: column;
}

.flex-row {
  flex-direction: row;
}

.items-center {
  align-items: center;
}

.items-start {
  align-items: flex-start;
}

.items-end {
  align-items: flex-end;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.justify-around {
  justify-content: space-around;
}

.flex-1 {
  flex: 1;
}

.flex-wrap {
  flex-wrap: wrap;
}

/* 自定义导航栏 */
.custom-nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 999;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20rpx);
  -webkit-backdrop-filter: blur(20rpx);
}

.nav-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 24rpx;
  height: 88rpx;
}

.nav-title {
  font-size: 36rpx;
  font-weight: 700;
  color: var(--text-primary);
}

.nav-actions {
  display: flex;
  align-items: center;
  gap: 24rpx;
}

/* 加载状态 */
.loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 80rpx 0;
}

.loading-spinner {
  width: 60rpx;
  height: 60rpx;
  border: 4rpx solid var(--border-color);
  border-top: 4rpx solid var(--primary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 24rpx;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-text {
  font-size: 28rpx;
  color: var(--text-tertiary);
}

/* 空状态 */
.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 120rpx 0;
  text-align: center;
}

.empty-icon {
  font-size: 120rpx;
  margin-bottom: 32rpx;
  opacity: 0.5;
}

.empty-text {
  font-size: 32rpx;
  color: var(--text-tertiary);
  margin-bottom: 16rpx;
}

.empty-desc {
  font-size: 28rpx;
  color: var(--text-tertiary);
}

/* 渐变文字 */
.gradient-text {
  background: linear-gradient(135deg, var(--primary-color) 0%, #5856D6 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* 毛玻璃效果 */
.glass {
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(20rpx);
  -webkit-backdrop-filter: blur(20rpx);
  border: 1rpx solid rgba(255, 255, 255, 0.2);
}

/* 动画类 */
.fade-in {
  animation: fadeIn 0.5s ease-in-out;
}

.slide-up {
  animation: slideUp 0.3s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    transform: translateY(50rpx);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

/* 响应式工具类 */
@media (max-width: 480px) {
  .container {
    padding: 0 20rpx;
  }
  
  .card {
    margin: 16rpx 20rpx;
    padding: 24rpx;
  }
}

/* 深色模式支持 */
@media (prefers-color-scheme: dark) {
  page {
    --text-primary: #FFFFFF;
    --text-secondary: #CCCCCC;
    --text-tertiary: #999999;
    --background-color: #000000;
    --card-background: #1C1C1E;
    --border-color: #38383A;
  }
  
  .card {
    box-shadow: 0 8rpx 40rpx rgba(0, 0, 0, 0.3);
  }
}

===== miniprogram\sitemap.json =====

{
  "desc": "关于本文件的更多信息，请参考文档 https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html",
  "rules": [{
    "action": "allow",
    "page": "*"
  }]
}

===== miniprogram\components\comment-list\comment-list.js =====

Component({
  properties: {
    comments: {
      type: Array,
      value: []
    },
    postId: {
      type: String,
      value: ''
    }
  },

  data: {
    expandedComments: new Set()
  },

  methods: {
    onReplyTap(e) {
      const { comment } = e.currentTarget.dataset;
      this.triggerEvent('reply', {
        comment: comment,
        postId: this.properties.postId
      });
    },

    onLikeComment(e) {
      const { comment } = e.currentTarget.dataset;
      this.triggerEvent('likeComment', {
        commentId: comment._id,
        isLiked: !comment.isLiked
      });
    },

    onExpandReplies(e) {
      const { commentId } = e.currentTarget.dataset;
      const { expandedComments } = this.data;
      
      if (expandedComments.has(commentId)) {
        expandedComments.delete(commentId);
      } else {
        expandedComments.add(commentId);
      }
      
      this.setData({
        expandedComments: new Set(expandedComments)
      });
    },

    onAvatarTap(e) {
      const { userId } = e.currentTarget.dataset;
      this.triggerEvent('avatarTap', { userId });
    }
  }
});

===== miniprogram\components\comment-list\comment-list.json =====

{
  "component": true,
  "usingComponents": {}
}

===== miniprogram\components\comment-list\comment-list.wxml =====

<view class="comment-list">
  <view class="comment-header">
    <text class="comment-title">评论</text>
    <text class="comment-count">({{comments.length}})</text>
  </view>

  <view class="comments-container">
    <block wx:for="{{comments}}" wx:key="_id" wx:for-index="index">
      <view class="comment-item">
        <!-- 主评论 -->
        <view class="main-comment">
          <image 
            class="comment-avatar" 
            src="{{item.authorAvatar || '/images/default-avatar.png'}}"
            data-user-id="{{item.authorId}}"
            bind:tap="onAvatarTap"
          />
          <view class="comment-content">
            <view class="comment-info">
              <text class="comment-author">{{item.authorName}}</text>
              <text class="comment-time">{{item.createTime}}</text>
            </view>
            <text class="comment-text">{{item.content}}</text>
            <view class="comment-actions">
              <view 
                class="action-btn {{item.isLiked ? 'liked' : ''}}" 
                data-comment="{{item}}"
                bind:tap="onLikeComment"
              >
                <text class="action-icon">{{item.isLiked ? '❤️' : '🤍'}}</text>
                <text class="action-text">{{item.likeCount || 0}}</text>
              </view>
              <view 
                class="action-btn" 
                data-comment="{{item}}"
                bind:tap="onReplyTap"
              >
                <text class="action-icon">↩️</text>
                <text class="action-text">回复</text>
              </view>
            </view>
          </view>
        </view>

        <!-- 回复列表 -->
        <view class="replies-section" wx:if="{{item.replies && item.replies.length > 0}}">
          <view 
            class="replies-toggle" 
            data-comment-id="{{item._id}}"
            bind:tap="onExpandReplies"
          >
            <text class="toggle-text">
              {{expandedComments.has(item._id) ? '收起' : '展开+{item.replies.length}条回复'}}
            </text>
            <text class="toggle-icon">{{expandedComments.has(item._id) ? '▲' : '▼'}}</text>
          </view>

          <view class="replies-list" wx:if="{{expandedComments.has(item._id)}}">
            <block wx:for="{{item.replies}}" wx:key="_id">
              <view class="reply-item">
                <image 
                  class="reply-avatar" 
                  src="{{item.authorAvatar || '/images/default-avatar.png'}}"
                  data-user-id="{{item.authorId}}"
                  bind:tap="onAvatarTap"
                />
                <view class="reply-content">
                  <view class="reply-info">
                    <text class="reply-author">{{item.authorName}}</text>
                    <text class="reply-time">{{item.createTime}}</text>
                  </view>
                  <text class="reply-text">
                    <text class="reply-to" wx:if="{{item.replyTo}}">@{{item.replyTo}} </text>
                    {{item.content}}
                  </text>
                </view>
              </view>
            </block>
          </view>
        </view>
      </view>
    </block>
  </view>

  <view class="empty-state" wx:if="{{comments.length === 0}}">
    <text class="empty-text">暂无评论，快来抢沙发吧~</text>
  </view>
</view>

===== miniprogram\components\comment-list\comment-list.wxss =====

.comment-list {
  background: #ffffff;
  border-radius: 20rpx;
  margin: 20rpx 24rpx;
  padding: 32rpx;
  box-shadow: 0 8rpx 40rpx rgba(0, 0, 0, 0.06);
}

.comment-header {
  display: flex;
  align-items: center;
  margin-bottom: 32rpx;
  padding-bottom: 24rpx;
  border-bottom: 2rpx solid #f8f9fa;
}

.comment-title {
  font-size: 36rpx;
  font-weight: 700;
  color: #1a1a1a;
  margin-right: 16rpx;
}

.comment-count {
  font-size: 28rpx;
  color: #999;
}

/* 评论项 */
.comment-item {
  margin-bottom: 32rpx;
}

.comment-item:last-child {
  margin-bottom: 0;
}

.main-comment {
  display: flex;
  margin-bottom: 16rpx;
}

.comment-avatar {
  width: 64rpx;
  height: 64rpx;
  border-radius: 50%;
  margin-right: 20rpx;
  flex-shrink: 0;
}

.comment-content {
  flex: 1;
}

.comment-info {
  display: flex;
  align-items: center;
  margin-bottom: 12rpx;
}

.comment-author {
  font-size: 28rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-right: 20rpx;
}

.comment-time {
  font-size: 24rpx;
  color: #999;
}

.comment-text {
  font-size: 30rpx;
  line-height: 1.5;
  color: #333;
  margin-bottom: 16rpx;
}

.comment-actions {
  display: flex;
  align-items: center;
}

.action-btn {
  display: flex;
  align-items: center;
  margin-right: 32rpx;
  padding: 12rpx 20rpx;
  border-radius: 20rpx;
  background: #f8f9fa;
  transition: all 0.3s ease;
}

.action-btn:active {
  background: #e9ecef;
  transform: scale(0.95);
}

.action-btn.liked {
  background: #fff0f0;
}

.action-icon {
  font-size: 28rpx;
  margin-right: 8rpx;
}

.action-text {
  font-size: 24rpx;
  color: #666;
}

.action-btn.liked .action-text {
  color: #ff4757;
}

/* 回复区域 */
.replies-section {
  margin-left: 84rpx;
  border-left: 4rpx solid #f0f0f0;
  padding-left: 24rpx;
}

.replies-toggle {
  display: flex;
  align-items: center;
  padding: 16rpx 0;
  color: #007AFF;
  font-size: 26rpx;
  font-weight: 500;
}

.toggle-text {
  margin-right: 12rpx;
}

.toggle-icon {
  font-size: 20rpx;
}

.reply-item {
  display: flex;
  margin-bottom: 20rpx;
  padding: 20rpx;
  background: #f8f9fa;
  border-radius: 16rpx;
}

.reply-item:last-child {
  margin-bottom: 0;
}

.reply-avatar {
  width: 48rpx;
  height: 48rpx;
  border-radius: 50%;
  margin-right: 16rpx;
  flex-shrink: 0;
}

.reply-content {
  flex: 1;
}

.reply-info {
  display: flex;
  align-items: center;
  margin-bottom: 8rpx;
}

.reply-author {
  font-size: 26rpx;
  font-weight: 500;
  color: #1a1a1a;
  margin-right: 16rpx;
}

.reply-time {
  font-size: 22rpx;
  color: #999;
}

.reply-text {
  font-size: 28rpx;
  line-height: 1.4;
  color: #555;
}

.reply-to {
  color: #007AFF;
  font-weight: 500;
}

/* 空状态 */
.empty-state {
  text-align: center;
  padding: 80rpx 0;
}

.empty-text {
  font-size: 28rpx;
  color: #999;
}

===== miniprogram\components\contact-button\contact-button.js =====

Component({
  properties: {
    contactInfo: {
      type: Object,
      value: {}
    },
    buttonText: {
      type: String,
      value: '联系卖家'
    },
    buttonType: {
      type: String,
      value: 'primary' // primary, secondary, outline
    },
    disabled: {
      type: Boolean,
      value: false
    }
  },

  methods: {
    onContactTap() {
      if (this.properties.disabled) return;
      
      this.triggerEvent('contact', {
        contactInfo: this.properties.contactInfo
      });
    },

    onPhoneTap() {
      if (this.properties.contactInfo.phone) {
        wx.makePhoneCall({
          phoneNumber: this.properties.contactInfo.phone
        });
      }
    },

    onWechatTap() {
      if (this.properties.contactInfo.wechat) {
        wx.setClipboardData({
          data: this.properties.contactInfo.wechat,
          success: () => {
            wx.showToast({
              title: '微信号已复制',
              icon: 'success'
            });
          }
        });
      }
    }
  }
});

===== miniprogram\components\contact-button\contact-button.json =====

{
  "component": true,
  "usingComponents": {}
}

===== miniprogram\components\contact-button\contact-button.wxml =====

<view class="contact-button">
  <!-- 主要联系按钮 -->
  <view 
    class="contact-main-btn btn-{{buttonType}} {{disabled ? 'disabled' : ''}}"
    bind:tap="onContactTap"
  >
    <text class="btn-icon">💬</text>
    <text class="btn-text">{{buttonText}}</text>
  </view>

  <!-- 联系方式弹窗 -->
  <view class="contact-modal" wx:if="{{showModal}}">
    <view class="modal-mask" bind:tap="onContactTap"></view>
    <view class="modal-content">
      <view class="modal-header">
        <text class="modal-title">联系卖家</text>
        <text class="modal-close" bind:tap="onContactTap">×</text>
      </view>
      
      <view class="contact-options">
        <view class="contact-option" wx:if="{{contactInfo.phone}}" bind:tap="onPhoneTap">
          <view class="option-icon">📞</view>
          <view class="option-info">
            <text class="option-title">电话联系</text>
            <text class="option-desc">{{contactInfo.phone}}</text>
          </view>
          <text class="option-arrow">›</text>
        </view>
        
        <view class="contact-option" wx:if="{{contactInfo.wechat}}" bind:tap="onWechatTap">
          <view class="option-icon">💬</view>
          <view class="option-info">
            <text class="option-title">微信联系</text>
            <text class="option-desc">{{contactInfo.wechat}}</text>
          </view>
          <text class="option-arrow">›</text>
        </view>
        
        <view class="contact-option" bind:tap="onContactTap">
          <view class="option-icon">👤</view>
          <view class="option-info">
            <text class="option-title">在线聊天</text>
            <text class="option-desc">立即与卖家沟通</text>
          </view>
          <text class="option-arrow">›</text>
        </view>
      </view>
    </view>
  </view>
</view>

===== miniprogram\components\contact-button\contact-button.wxss =====

.contact-button {
  width: 100%;
}

/* 主要按钮样式 */
.contact-main-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 24rpx 32rpx;
  border-radius: 50rpx;
  font-size: 32rpx;
  font-weight: 600;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.contact-main-btn:active {
  transform: scale(0.98);
}

.contact-main-btn.disabled {
  opacity: 0.5;
  pointer-events: none;
}

/* 按钮类型 */
.btn-primary {
  background: linear-gradient(135deg, #007AFF 0%, #5856D6 100%);
  color: white;
  box-shadow: 0 8rpx 32rpx rgba(0, 122, 255, 0.3);
}

.btn-secondary {
  background: linear-gradient(135deg, #34C759 0%, #30D158 100%);
  color: white;
  box-shadow: 0 8rpx 32rpx rgba(52, 199, 89, 0.3);
}

.btn-outline {
  background: transparent;
  color: #007AFF;
  border: 2rpx solid #007AFF;
}

.btn-icon {
  font-size: 36rpx;
  margin-right: 16rpx;
}

.btn-text {
  font-weight: 600;
}

/* 弹窗样式 */
.contact-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 9999;
  display: flex;
  align-items: flex-end;
}

.modal-mask {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
}

.modal-content {
  position: relative;
  width: 100%;
  background: white;
  border-radius: 40rpx 40rpx 0 0;
  padding: 48rpx 32rpx;
  animation: slideUp 0.3s ease;
}

@keyframes slideUp {
  from {
    transform: translateY(100%);
  }
  to {
    transform: translateY(0);
  }
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 40rpx;
}

.modal-title {
  font-size: 36rpx;
  font-weight: 700;
  color: #1a1a1a;
}

.modal-close {
  font-size: 48rpx;
  color: #999;
  padding: 16rpx;
}

/* 联系选项 */
.contact-options {
  display: flex;
  flex-direction: column;
  gap: 24rpx;
}

.contact-option {
  display: flex;
  align-items: center;
  padding: 32rpx;
  background: #f8f9fa;
  border-radius: 20rpx;
  transition: all 0.3s ease;
}

.contact-option:active {
  background: #e9ecef;
  transform: scale(0.98);
}

.option-icon {
  font-size: 48rpx;
  margin-right: 24rpx;
}

.option-info {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.option-title {
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 8rpx;
}

.option-desc {
  font-size: 26rpx;
  color: #666;
}

.option-arrow {
  font-size: 36rpx;
  color: #999;
  margin-left: 16rpx;
}

===== miniprogram\components\level-progress\level-progress.js =====

Component({
  properties: {
    currentExp: {
      type: Number,
      value: 0
    },
    nextLevelExp: {
      type: Number,
      value: 100
    },
    currentLevel: {
      type: Number,
      value: 1
    },
    nextLevel: {
      type: Number,
      value: 2
    },
    showInfo: {
      type: Boolean,
      value: true
    }
  },

  data: {
    progress: 0,
    animatedProgress: 0
  },

  observers: {
    'currentExp, nextLevelExp': function(currentExp, nextLevelExp) {
      const progress = Math.min((currentExp / nextLevelExp) * 100, 100);
      
      this.setData({ progress });
      
      // 动画效果
      setTimeout(() => {
        this.setData({ animatedProgress: progress });
      }, 300);
    }
  },

  methods: {
    onProgressTap() {
      this.triggerEvent('infoTap', {
        currentLevel: this.properties.currentLevel,
        currentExp: this.properties.currentExp,
        nextLevelExp: this.properties.nextLevelExp
      });
    }
  }
});

===== miniprogram\components\level-progress\level-progress.json =====

{
  "component": true,
  "usingComponents": {}
}

===== miniprogram\components\level-progress\level-progress.wxml =====

<view class="level-progress" bind:tap="onProgressTap">
  <!-- 等级信息 -->
  <view class="level-info" wx:if="{{showInfo}}">
    <view class="level-current">
      <text class="level-label">Lv.{{currentLevel}}</text>
      <text class="level-name">{{getLevelName(currentLevel)}}</text>
    </view>
    <view class="level-exp">
      <text class="exp-current">{{currentExp}}</text>
      <text class="exp-separator">/</text>
      <text class="exp-total">{{nextLevelExp}}</text>
    </view>
    <view class="level-next">
      <text class="level-label">Lv.{{nextLevel}}</text>
      <text class="level-name">{{getLevelName(nextLevel)}}</text>
    </view>
  </view>

  <!-- 进度条 -->
  <view class="progress-container">
    <view class="progress-background">
      <view 
        class="progress-fill" 
        style="width: {{animatedProgress}}%"
      ></view>
    </view>
    
    <!-- 进度节点 -->
    <view class="progress-milestones">
      <view 
        class="milestone {{index * 25 <= animatedProgress ? 'active' : ''}}" 
        wx:for="{{4}}" 
        wx:key="index"
        style="left: {{(index + 1) * 25}}%"
      ></view>
    </view>
  </view>

  <!-- 进度提示 -->
  <view class="progress-tip" wx:if="{{showInfo}}">
    <text class="tip-text">
      还差 {{nextLevelExp - currentExp}} 经验升级到 Lv.{{nextLevel}}
    </text>
  </view>
</view>

===== miniprogram\components\level-progress\level-progress.wxss =====

.level-progress {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 24rpx;
  padding: 32rpx;
  color: white;
  position: relative;
  overflow: hidden;
}

.level-progress::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="1"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
  opacity: 0.3;
}

/* 等级信息 */
.level-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24rpx;
  position: relative;
  z-index: 2;
}

.level-current,
.level-next {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.level-label {
  font-size: 32rpx;
  font-weight: 700;
  margin-bottom: 8rpx;
}

.level-name {
  font-size: 24rpx;
  opacity: 0.9;
}

.level-exp {
  display: flex;
  align-items: center;
  font-weight: 600;
}

.exp-current {
  font-size: 36rpx;
  font-weight: 700;
}

.exp-separator {
  font-size: 28rpx;
  margin: 0 8rpx;
  opacity: 0.7;
}

.exp-total {
  font-size: 28rpx;
  opacity: 0.9;
}

/* 进度条容器 */
.progress-container {
  position: relative;
  margin: 32rpx 0;
  z-index: 2;
}

.progress-background {
  height: 16rpx;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 8rpx;
  overflow: hidden;
  position: relative;
}

.progress-fill {
  height: 100%;
  background: linear-gradient(90deg, #FFD700 0%, #FFA500 100%);
  border-radius: 8rpx;
  transition: width 1.5s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.progress-fill::after {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.4),
    transparent
  );
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  0% {
    left: -100%;
  }
  100% {
    left: 100%;
  }
}

/* 进度节点 */
.progress-milestones {
  position: absolute;
  top: -4rpx;
  left: 0;
  right: 0;
  height: 24rpx;
}

.milestone {
  position: absolute;
  width: 8rpx;
  height: 8rpx;
  background: rgba(255, 255, 255, 0.5);
  border-radius: 50%;
  transform: translateX(-50%);
  transition: all 0.3s ease;
}

.milestone.active {
  background: #FFD700;
  box-shadow: 0 0 12rpx rgba(255, 215, 0, 0.6);
  transform: translateX(-50%) scale(1.2);
}

/* 进度提示 */
.progress-tip {
  text-align: center;
  margin-top: 16rpx;
  position: relative;
  z-index: 2;
}

.tip-text {
  font-size: 24rpx;
  opacity: 0.9;
}

===== miniprogram\components\post-card\post-card.js =====

Component({
  properties: {
    postData: {
      type: Object,
      value: {}
    },
    showActions: {
      type: Boolean,
      value: true
    }
  },

  data: {
    isLiked: false,
    likeCount: 0,
    isExpanded: false
  },

  observers: {
    'postData': function(postData) {
      if (postData) {
        this.setData({
          likeCount: postData.likeCount || 0,
          isLiked: postData.isLiked || false
        });
      }
    }
  },

  methods: {
    onLikeTap() {
      const { isLiked, likeCount } = this.data;
      const newIsLiked = !isLiked;
      const newLikeCount = newIsLiked ? likeCount + 1 : likeCount - 1;
      
      this.setData({
        isLiked: newIsLiked,
        likeCount: newLikeCount
      });
      
      this.triggerEvent('like', {
        postId: this.properties.postData._id,
        isLiked: newIsLiked
      });
    },

    onCommentTap() {
      this.triggerEvent('comment', {
        postId: this.properties.postData._id
      });
    },

    onShareTap() {
      this.triggerEvent('share', {
        postId: this.properties.postData._id
      });
    },

    onAvatarTap() {
      this.triggerEvent('avatarTap', {
        userId: this.properties.postData.authorId
      });
    },

    onContentTap() {
      if (this.properties.postData.content && this.properties.postData.content.length > 100) {
        this.setData({
          isExpanded: !this.data.isExpanded
        });
      }
    },

    onImageTap(e) {
      const { index } = e.currentTarget.dataset;
      this.triggerEvent('imageTap', {
        imageList: this.properties.postData.images || [],
        currentIndex: index
      });
    }
  }
});

===== miniprogram\components\post-card\post-card.json =====

{
  "component": true,
  "usingComponents": {}
}

===== miniprogram\components\post-card\post-card.wxml =====

<view class="post-card">
  <!-- 作者信息 -->
  <view class="author-section">
    <view class="author-info">
      <image 
        class="author-avatar" 
        src="{{postData.authorAvatar || '/images/default-avatar.png'}}"
        bind:tap="onAvatarTap"
      />
      <view class="author-details">
        <text class="author-name">{{postData.authorName || '匿名用户'}}</text>
        <text class="post-time">{{postData.createTime}}</text>
      </view>
    </view>
    <view class="post-tag {{postData.tag || 'default'}}">
      {{postData.tag || '分享'}}
    </view>
  </view>

  <!-- 帖子内容 -->
  <view class="content-section">
    <text 
      class="content-text {{isExpanded ? 'expanded' : ''}}"
      bind:tap="onContentTap"
    >
      {{postData.content}}
    </text>
    <text 
      class="expand-btn" 
      wx:if="{{postData.content && postData.content.length > 100}}"
      bind:tap="onContentTap"
    >
      {{isExpanded ? '收起' : '展开'}}
    </text>
  </view>

  <!-- 图片展示 -->
  <view class="image-section" wx:if="{{postData.images && postData.images.length > 0}}">
    <view class="image-grid image-grid-{{postData.images.length > 1 ? 'multiple' : 'single'}}">
      <block wx:for="{{postData.images}}" wx:key="index">
        <image 
          class="post-image {{postData.images.length === 1 ? 'single-image' : ''}}"
          src="{{item}}"
          mode="aspectFill"
          data-index="{{index}}"
          bind:tap="onImageTap"
        />
      </block>
    </view>
  </view>

  <!-- 交互按钮 -->
  <view class="action-section" wx:if="{{showActions}}">
    <view class="action-buttons">
      <view class="action-item {{isLiked ? 'liked' : ''}}" bind:tap="onLikeTap">
        <text class="icon-like">{{isLiked ? '❤️' : '🤍'}}</text>
        <text class="action-count">{{likeCount}}</text>
      </view>
      
      <view class="action-item" bind:tap="onCommentTap">
        <text class="icon-comment">💬</text>
        <text class="action-count">{{postData.commentCount || 0}}</text>
      </view>
      
      <view class="action-item" bind:tap="onShareTap">
        <text class="icon-share">↗️</text>
        <text class="action-count">{{postData.shareCount || 0}}</text>
      </view>
    </view>
  </view>
</view>

===== miniprogram\components\post-card\post-card.wxss =====

.post-card {
  background: #ffffff;
  border-radius: 20rpx;
  margin: 20rpx 24rpx;
  padding: 32rpx;
  box-shadow: 0 8rpx 40rpx rgba(0, 0, 0, 0.06);
  transition: all 0.3s ease;
  position: relative;
}

.post-card:active {
  transform: translateY(-4rpx);
  box-shadow: 0 12rpx 50rpx rgba(0, 0, 0, 0.12);
}

/* 作者信息区域 */
.author-section {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 24rpx;
}

.author-info {
  display: flex;
  align-items: center;
  flex: 1;
}

.author-avatar {
  width: 80rpx;
  height: 80rpx;
  border-radius: 50%;
  margin-right: 20rpx;
  border: 4rpx solid #f8f9fa;
}

.author-details {
  display: flex;
  flex-direction: column;
}

.author-name {
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 8rpx;
}

.post-time {
  font-size: 24rpx;
  color: #999;
}

.post-tag {
  padding: 8rpx 20rpx;
  border-radius: 20rpx;
  font-size: 24rpx;
  font-weight: 500;
}

.post-tag.default {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.post-tag.hot {
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  color: white;
}

.post-tag.new {
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  color: white;
}

/* 内容区域 */
.content-section {
  margin-bottom: 24rpx;
  position: relative;
}

.content-text {
  font-size: 30rpx;
  line-height: 1.6;
  color: #333;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.content-text:not(.expanded) {
  -webkit-line-clamp: 3;
}

.expand-btn {
  color: #007AFF;
  font-size: 28rpx;
  margin-left: 12rpx;
  font-weight: 500;
}

/* 图片区域 */
.image-section {
  margin-bottom: 24rpx;
}

.image-grid {
  border-radius: 16rpx;
  overflow: hidden;
}

.image-grid-multiple {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rpx;
}

.post-image {
  width: 100%;
  background-color: #f8f9fa;
}

.single-image {
  height: 400rpx;
  border-radius: 16rpx;
}

.image-grid-multiple .post-image {
  height: 300rpx;
}

/* 交互按钮区域 */
.action-section {
  border-top: 2rpx solid #f5f5f5;
  padding-top: 24rpx;
}

.action-buttons {
  display: flex;
  justify-content: space-around;
  align-items: center;
}

.action-item {
  display: flex;
  align-items: center;
  padding: 16rpx 32rpx;
  border-radius: 30rpx;
  transition: all 0.3s ease;
  background: #f8f9fa;
}

.action-item:active {
  background: #e9ecef;
  transform: scale(0.95);
}

.action-item.liked {
  background: #fff0f0;
}

.icon-like, .icon-comment, .icon-share {
  font-size: 36rpx;
  margin-right: 12rpx;
}

.action-count {
  font-size: 28rpx;
  color: #666;
  font-weight: 500;
}

.action-item.liked .action-count {
  color: #ff4757;
}

===== miniprogram\images\default-avatar.png  (binary, skipped) =====


===== miniprogram\images\tab\message-default.png  (binary, skipped) =====


===== miniprogram\images\tab\message-selected.png  (binary, skipped) =====


===== miniprogram\images\tab\post-default.png  (binary, skipped) =====


===== miniprogram\images\tab\post-selected.png  (binary, skipped) =====


===== miniprogram\images\tab\profile-default.png  (binary, skipped) =====


===== miniprogram\images\tab\profile-selected.png  (binary, skipped) =====


===== miniprogram\images\tab\search-default.png  (binary, skipped) =====


===== miniprogram\images\tab\search-selected.png  (binary, skipped) =====


===== miniprogram\pages\auth\index.js =====

// auth/index.js - 清理后的版本
const app = getApp();

Page({
  data: {
    customNavHeight: 0,
    userInfo: null,
    isLogin: false,
    loginLoading: false,
    agreementChecked: false,
    cloudReady: false
  },

  onLoad(options) {
    this.setData({
      customNavHeight: app.globalData.customNavHeight
    });
    this.checkCloudStatus();
    this.checkLoginStatus();
  },

  onShow() {
    this.checkCloudStatus();
    this.checkLoginStatus();
  },

    // 检查云服务状态
  checkCloudStatus() {
      if (app.globalData.cloudInitialized) {
        this.setData({ cloudReady: true });
      } else {
        // 如果云服务未就绪，延迟检查
        setTimeout(() => {
          this.checkCloudStatus();
        }, 500);
      }
  },

  checkLoginStatus() {
    const isLoggedIn = app.globalData.isLoggedIn;
    const userInfo = app.globalData.userInfo;
    
    this.setData({
      isLogin: isLoggedIn,
      userInfo: userInfo
    });

    if (isLoggedIn) {
      setTimeout(() => {
        this.redirectToHome();
      }, 1500);
    }
  },

  // 微信登录 - 完整的实现
  async onGetUserInfo(e) {
    console.log('获取用户信息事件:', e);
    
    // 检查云服务是否就绪
    if (!this.data.cloudReady) {
      wx.showToast({
        title: '服务初始化中，请稍后',
        icon: 'none'
      });
      return;
    }

    if (!this.data.agreementChecked) {
      wx.showToast({
        title: '请先同意协议',
        icon: 'none'
      });
      return;
    }

    if (e.detail.errMsg === 'getUserInfo:ok') {
      console.log('用户授权成功，用户信息:', e.detail.userInfo);
      this.setData({ loginLoading: true });
      await this.wechatLogin(e.detail.userInfo);
    } else {
      console.log('用户拒绝授权:', e.detail.errMsg);
      wx.showToast({
        title: '授权失败，请允许授权',
        icon: 'none'
      });
    }
  },

  // 微信登录核心逻辑
  async wechatLogin(userInfo) {
    try {
      console.log('开始微信登录流程');
      
      // 第一步：获取登录 code
      const loginResult = await new Promise((resolve, reject) => {
        wx.login({
          success: (res) => {
            if (res.code) {
              console.log('获取到微信登录code:', res.code);
              resolve(res);
            } else {
              reject(new Error('获取登录凭证失败: ' + res.errMsg));
            }
          },
          fail: (err) => {
            reject(new Error('wx.login 调用失败: ' + err.errMsg));
          }
        });
      });

      if (!loginResult.code) {
        throw new Error('获取登录凭证失败');
      }

      console.log('获取到登录code，调用云函数...');

      // 第二步：调用云函数
      const cloudResult = await wx.cloud.callFunction({
        name: 'auth',
        data: {
          action: 'login',
          code: loginResult.code,
          userInfo: userInfo
        }
      });

      console.log('云函数返回:', cloudResult);

      if (cloudResult.result && cloudResult.result.success) {
        const userData = cloudResult.result.data.userInfo;
        
        // 存储登录信息
        wx.setStorageSync('userInfo', userData);
        wx.setStorageSync('token', 'user-logged-in');
        
        // 更新全局状态
        app.globalData.isLoggedIn = true;
        app.globalData.userInfo = userData;

        console.log('登录成功，用户数据:', userData);
        
        wx.showToast({
          title: '登录成功',
          icon: 'success'
        });
        
        // 跳转到首页
        setTimeout(() => {
          this.redirectToHome();
        }, 1000);
      } else {
        throw new Error(cloudResult.result?.message || '登录失败');
      }
    } catch (error) {
      console.error('微信登录失败:', error);
      
      let errorMessage = '登录失败';
      if (error.errMsg && error.errMsg.includes('Cloud API isn\'t enabled')) {
        errorMessage = '云服务未初始化，请重启小程序';
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      wx.showToast({
        title: errorMessage,
        icon: 'none',
        duration: 3000
      });
    } finally {
      this.setData({ loginLoading: false });
    }
  },

  // 手机号登录
  onPhoneLogin() {
    if (!this.data.agreementChecked) {
      wx.showToast({
        title: '请先同意协议',
        icon: 'none'
      });
      return;
    }

    this.showPhoneInputModal();
  },

  // 显示手机号输入弹窗
  showPhoneInputModal() {
    wx.showModal({
      title: '手机号登录',
      content: '请输入手机号进行模拟登录',
      editable: true,
      placeholderText: '请输入手机号',
      success: (res) => {
        if (res.confirm && res.content) {
          this.loginWithPhone(res.content);
        }
      }
    });
  },

  // 手机号登录实现
  async loginWithPhone(phoneNumber) {
    this.setData({ loginLoading: true });

    try {
      const mockUser = {
        _id: 'phone-user-' + Date.now(),
        _openid: 'mock-phone-openid',
        avatarUrl: '/images/default-avatar.png',
        nickName: `用户${phoneNumber.slice(-4)}`,
        phone: phoneNumber,
        gender: 0,
        level: 1,
        exp: 0,
        postCount: 0,
        likeCount: 0,
        followerCount: 0,
        followingCount: 0,
        balance: 0,
        createTime: new Date(),
        lastLoginTime: new Date(),
        status: 'active'
      };

      // 存储登录信息
      wx.setStorageSync('userInfo', mockUser);
      wx.setStorageSync('token', 'user-logged-in');
      
      // 更新全局状态
      app.globalData.isLoggedIn = true;
      app.globalData.userInfo = mockUser;

      console.log('手机号登录成功');
      wx.showToast({
        title: '登录成功',
        icon: 'success'
      });
      
      this.redirectToHome();
    } catch (error) {
      console.error('手机号登录失败:', error);
      wx.showToast({
        title: '登录失败',
        icon: 'none'
      });
    } finally {
      this.setData({ loginLoading: false });
    }
  },

  // 协议勾选
  onAgreementChange(e) {
    this.setData({
      agreementChecked: e.detail.value.length > 0
    });
  },

  // 显示协议详情
  showAgreementDetail() {
    wx.showModal({
      title: '用户协议和隐私政策',
      content: '欢迎使用我们的应用！请仔细阅读用户协议和隐私政策。',
      showCancel: false,
      confirmText: '我知道了'
    });
  },

  // 跳转到首页
  redirectToHome() {
    setTimeout(() => {
      wx.switchTab({
        url: '/pages/posts/index',
        fail: (err) => {
          console.error('跳转首页失败:', err);
          wx.reLaunch({
            url: '/pages/posts/index'
          });
        }
      });
    }, 1000);
  },

  // 退出登录
  onLogout() {
    wx.showModal({
      title: '确认退出',
      content: '确定要退出登录吗？',
      success: (res) => {
        if (res.confirm) {
          this.logout();
        }
      }
    });
  },

  logout() {
    wx.removeStorageSync('token');
    wx.removeStorageSync('userInfo');
    app.globalData.isLoggedIn = false;
    app.globalData.userInfo = null;
    this.setData({
      isLogin: false,
      userInfo: null,
      agreementChecked: false
    });
    wx.showToast({
      title: '已退出登录',
      icon: 'success'
    });
  },

  // 调试方法
  testAgreement() {
    wx.showModal({
      title: '协议状态',
      content: `当前协议状态: ${this.data.agreementChecked ? '已同意' : '未同意'}`,
      showCancel: false
    });
  },

  forceAgreementTrue() {
    this.setData({
      agreementChecked: true
    });
    wx.showToast({
      title: '已同意协议',
      icon: 'success'
    });
  }
});

===== miniprogram\pages\auth\index.json =====

{
  "navigationStyle": "custom",
  "backgroundColor": "#F8F9FA",
  "backgroundTextStyle": "dark",
  "enablePullDownRefresh": false,
  "usingComponents": {}
}

===== miniprogram\pages\auth\index.wxml =====

<view class="auth-page">
  <!-- 自定义导航栏 -->
  <view class="custom-nav" style="height: {{customNavHeight}}px">
    <view class="nav-content" style="height: 44px; padding-top: {{statusBarHeight}}px">
      <text class="nav-title">登录</text>
    </view>
  </view>

  <view class="auth-container" style="padding-top: {{customNavHeight}}px">
    <!-- 已登录状态 -->
    <view class="logged-in" wx:if="{{isLogin}}">
      <view class="user-card">
        <image class="user-avatar" src="{{userInfo.avatarUrl || '/images/default-avatar.png'}}" />
        <text class="user-name">{{userInfo.nickName || '用户'}}</text>
        <text class="welcome-text">欢迎回来！</text>
        
        <view class="login-stats">
          <view class="stat-item">
            <text class="stat-number">Lv.{{userInfo.level || 1}}</text>
            <text class="stat-label">等级</text>
          </view>
          <view class="stat-item">
            <text class="stat-number">{{userInfo.exp || 0}}</text>
            <text class="stat-label">经验</text>
          </view>
          <view class="stat-item">
            <text class="stat-number">{{userInfo.postCount || 0}}</text>
            <text class="stat-label">帖子</text>
          </view>
        </view>
      </view>

      <view class="action-buttons">
        <button class="btn btn-primary" bindtap="redirectToHome">
          进入首页
        </button>
        <button class="btn btn-ghost" bindtap="onLogout">
          退出登录
        </button>
      </view>
    </view>

    <!-- 未登录状态 -->
    <view class="logged-out" wx:else>
      <!-- 欢迎区域 -->
      <view class="welcome-section">
        <view class="app-logo">
          <text class="logo-icon">🌟</text>
        </view>
        <text class="welcome-title">欢迎来到高端社交</text>
        <text class="welcome-desc">连接志同道合的朋友，发现精彩内容</text>
      </view>

      <!-- 登录方式 -->
      <view class="login-methods">
        <!-- 微信登录按钮 -->
        <button 
          class="method-card wechat-login-btn" 
          open-type="getUserInfo"
          bindgetuserinfo="onGetUserInfo"
          style="border: 1rpx solid #09BB07; background: transparent;"
          wx:if="{{!loginLoading}}"
        >
          <view class="method-content">
            <view class="method-icon" style="color: #09BB07">💬</view>
            <view class="method-info">
              <text class="method-name">微信一键登录</text>
              <text class="method-desc">使用微信授权快速登录</text>
            </view>
            <view class="method-arrow">›</view>
          </view>
        </button>

        <!-- 加载状态 -->
        <view class="method-card disabled" wx:else style="border: 1rpx solid #09BB07;">
          <view class="method-content">
            <view class="method-icon" style="color: #09BB07">💬</view>
            <view class="method-info">
              <text class="method-name">微信一键登录</text>
              <text class="method-desc">登录中...</text>
            </view>
            <view class="method-arrow">›</view>
          </view>
        </view>

        <!-- 手机号登录 -->
        <view 
          class="method-card {{loginLoading ? 'disabled' : ''}}" 
          bindtap="onPhoneLogin"
          style="border: 1rpx solid #007AFF"
        >
          <view class="method-content">
            <view class="method-icon" style="color: #007AFF">📱</view>
            <view class="method-info">
              <text class="method-name">手机号验证</text>
              <text class="method-desc">输入手机号模拟登录</text>
            </view>
            <view class="method-arrow">›</view>
          </view>
        </view>
      </view>

      <!-- 协议区域 -->
      <view class="agreement-section">
        <view class="agreement-checkbox">
          <checkbox 
            value="agree"
            checked="{{agreementChecked}}" 
            bindchange="onAgreementChange"
            color="#007AFF"
          />
          <text class="agreement-text">
            我已阅读并同意
            <text class="agreement-link" catchtap="showAgreementDetail">
              《用户协议和隐私政策》
            </text>
          </text>
        </view>
      </view>

      <!-- 加载状态 -->
      <view class="login-loading" wx:if="{{loginLoading}}">
        <view class="loading-spinner"></view>
        <text class="loading-text">登录中...</text>
      </view>
    </view>
  </view>

  <!-- 调试信息 -->
  <view class="debug-section" wx:if="{{true}}">
    <text class="debug-title">🔧 调试信息</text>
    <text class="debug-item">登录状态: {{isLogin ? '✅ 已登录' : '❌ 未登录'}}</text>
    <text class="debug-item">加载中: {{loginLoading ? '🔄 是' : '⏹️ 否'}}</text>
    <text class="debug-item">协议同意: {{agreementChecked ? '✅ 是' : '❌ 否'}}</text>
    <view class="debug-buttons">
      <button class="debug-btn" bindtap="testAgreement">测试协议状态</button>
      <button class="debug-btn" bindtap="forceAgreementTrue">强制同意协议</button>
    </view>
  </view>
</view>

===== miniprogram\pages\auth\index.wxss =====

.auth-page {
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.auth-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

/* 自定义导航栏 */
.custom-nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: transparent;
}

.nav-content {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 32rpx;
}

.nav-title {
  font-size: 36rpx;
  font-weight: 700;
  color: white;
}

/* 已登录状态 */
.logged-in {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding: 0 48rpx;
}

.user-card {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20rpx);
  border-radius: 32rpx;
  padding: 64rpx 48rpx;
  text-align: center;
  margin-bottom: 64rpx;
  box-shadow: 0 20rpx 60rpx rgba(0, 0, 0, 0.1);
}

.user-avatar {
  width: 160rpx;
  height: 160rpx;
  border-radius: 50%;
  margin-bottom: 32rpx;
  border: 6rpx solid rgba(255, 255, 255, 0.8);
  box-shadow: 0 12rpx 40rpx rgba(0, 0, 0, 0.15);
}

.user-name {
  display: block;
  font-size: 48rpx;
  font-weight: 700;
  color: #1a1a1a;
  margin-bottom: 16rpx;
}

.welcome-text {
  font-size: 32rpx;
  color: #666;
  margin-bottom: 48rpx;
}

.login-stats {
  display: flex;
  justify-content: space-around;
  margin-top: 32rpx;
}

.stat-item {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.stat-number {
  font-size: 36rpx;
  font-weight: 700;
  color: #007AFF;
  margin-bottom: 8rpx;
}

.stat-label {
  font-size: 24rpx;
  color: #999;
}

.action-buttons {
  display: flex;
  flex-direction: column;
  gap: 24rpx;
}

/* 未登录状态 */
.logged-out {
  flex: 1;
  display: flex;
  flex-direction: column;
  padding: 0 48rpx;
}

.welcome-section {
  text-align: center;
  margin: 120rpx 0 80rpx;
}

.app-logo {
  margin-bottom: 48rpx;
}

.logo-icon {
  font-size: 120rpx;
}

.welcome-title {
  display: block;
  font-size: 48rpx;
  font-weight: 700;
  color: white;
  margin-bottom: 24rpx;
}

.welcome-desc {
  display: block;
  font-size: 28rpx;
  color: rgba(255, 255, 255, 0.8);
}

/* 登录方式 */
.login-methods {
  margin-bottom: 64rpx;
}

.method-card {
  display: flex;
  align-items: center;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20rpx);
  border-radius: 24rpx;
  padding: 32rpx;
  margin-bottom: 24rpx;
  border: 2rpx solid;
  transition: all 0.3s ease;
}

.method-card:active {
  transform: scale(0.98);
  background: rgba(255, 255, 255, 0.85);
}

.method-card.disabled {
  opacity: 0.6;
  pointer-events: none;
}

.method-icon {
  font-size: 48rpx;
  margin-right: 24rpx;
}

.method-info {
  flex: 1;
}

.method-name {
  display: block;
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 8rpx;
}

.method-desc {
  display: block;
  font-size: 24rpx;
  color: #666;
}

.method-arrow {
  font-size: 36rpx;
  color: #999;
}

.permission-explain {
  text-align: center;
  margin-top: 32rpx;
}

.explain-text {
  font-size: 24rpx;
  color: #007AFF;
  text-decoration: underline;
}
/* 协议区域 */
.agreement-section {
  margin-top: auto;
  padding: 32rpx 0 64rpx;
}


.agreement-text {
  margin-left: 16rpx;
}

/* 加载状态 */
.login-loading {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  z-index: 2000;
}

.loading-spinner {
  width: 80rpx;
  height: 80rpx;
  border: 4rpx solid rgba(255, 255, 255, 0.3);
  border-top: 4rpx solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 32rpx;
}

.loading-text {
  color: white;
  font-size: 28rpx;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* 按钮样式 */
.btn {
  width: 100%;
  height: 96rpx;
  border: none;
  border-radius: 50rpx;
  font-size: 32rpx;
  font-weight: 600;
  transition: all 0.3s ease;
}

.btn:active {
  transform: scale(0.98);
}

.btn-primary {
  background: white;
  color: #007AFF;
}

.btn-ghost {
  background: transparent;
  color: white;
  border: 2rpx solid rgba(255, 255, 255, 0.3);
}

/* 快速登录按钮特殊样式 */
.quick-login-btn {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  line-height: normal;
  border-radius: 0;
}

.quick-login-btn::after {
  border: none;
}

/* 快速登录提示 */
.quick-login-tip {
  text-align: center;
  padding: 20rpx;
  background: #f0f9ff;
  border-radius: 16rpx;
  margin-top: 20rpx;
}

.tip-text {
  font-size: 24rpx;
  color: #007AFF;
}

/* 登录说明 */
.login-tips {
  margin-top: 40rpx;
  padding: 24rpx;
  background: #f8f9fa;
  border-radius: 16rpx;
}

.tip-title {
  display: block;
  font-size: 28rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 16rpx;
}

.tip-item {
  display: block;
  font-size: 24rpx;
  color: #666;
  margin-bottom: 8rpx;
  line-height: 1.4;
}

/* 调试信息 */
/* 调试信息样式 */
.debug-section {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.9);
  color: white;
  padding: 24rpx;
  z-index: 1000;
  border-top: 1rpx solid #333;
}

.debug-title {
  display: block;
  font-size: 28rpx;
  font-weight: 600;
  margin-bottom: 16rpx;
  color: #fff;
}

.debug-item {
  display: block;
  font-size: 24rpx;
  margin-bottom: 8rpx;
  line-height: 1.4;
  color: #ccc;
}

.debug-buttons {
  display: flex;
  gap: 16rpx;
  margin-top: 16rpx;
}

.debug-btn {
  flex: 1;
  font-size: 24rpx;
  padding: 16rpx;
  background: #333;
  color: white;
  border: none;
  border-radius: 8rpx;
}

.debug-btn::after {
  border: none;
}

.debug-btn:active {
  background: #555;
}

/* 协议链接样式 */
.agreement-link {
  color: #007AFF;
  margin: 0 8rpx;
}

.agreement-link:active {
  color: #0056CC;
  text-decoration: underline;
}

/* 微信登录按钮样式 */
.wechat-login-btn {
  border: none !important;
  background: none !important;
  padding: 0 !important;
  margin: 0 !important;
  line-height: normal !important;
  border-radius: 16rpx !important;
}

.wechat-login-btn::after {
  border: none !important;
}

.method-content {
  display: flex;
  align-items: center;
  width: 100%;
  padding: 30rpx;
}

/* 协议复选框样式 */
.agreement-checkbox {
  display: flex;
  align-items: center;
  font-size: 28rpx;
  color: #666;
}

.agreement-checkbox checkbox {
  margin-right: 10rpx;
}


===== miniprogram\pages\auth\explain\index.js =====

// pages/auth/explain/index.js
Page({

  /**
   * 页面的初始数据
   */
  data: {

  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad(options) {

  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady() {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow() {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom() {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage() {

  }
})

===== miniprogram\pages\auth\explain\index.wxml =====

<!--pages/auth/explain/index.wxml-->
<text>pages/auth/explain/index.wxml</text>

===== miniprogram\pages\message\index.js =====

const app = getApp();
const FormatTime = require('../../utils/formatTime.js');

Page({
  data: {
    customNavHeight: 0,
    activeTab: 'all', // all, unread, system
    tabs: [
      { id: 'all', name: '全部' },
      { id: 'unread', name: '未读' },
      { id: 'system', name: '系统' }
    ],
    messages: [],
    loading: false,
    hasMore: true,
    page: 1,
    pageSize: 15,
    unreadCount: 0, 
    messageIconMap: {
      comment: '💬',
      like: '❤️',
      follow: '👤',
      system: '📢',
      order: '📦',
      payment: '💰'
    }
  },

  onLoad(options) {
    this.setData({
      customNavHeight: app.globalData.customNavHeight
    });

    this.loadMessages(true);
    this.getUnreadCount();
  },

  onShow() {
    // 刷新未读数量
    this.getUnreadCount();
  },

  onPullDownRefresh() {
    this.refreshMessages();
  },

  onReachBottom() {
    this.loadMoreMessages();
  },

  // 加载消息
  async loadMessages(showLoading = false) {
    if (this.data.loading) return;

    this.setData({ loading: true });

    if (showLoading) {
      app.showLoading('加载中...');
    }

    try {
      const result = await wx.cloud.callFunction({
        name: 'message',
        data: {
          action: 'getMessages',
          type: this.data.activeTab,
          page: this.data.page,
          pageSize: this.data.pageSize
        }
      });

      if (result.result && result.result.success) {
        const { messages, hasMore } = result.result.data;
        
        const formattedMessages = messages.map(msg => ({
          ...msg,
          createTime: FormatTime.chatTime(msg.createTime),
          isExpanded: false
        }));

        this.setData({
          messages: this.data.page === 1 ? formattedMessages : [...this.data.messages, ...formattedMessages],
          hasMore: hasMore
        });

        if (showLoading) {
          wx.hideLoading();
        }
      } else {
        throw new Error(result.result.message || '加载失败');
      }
    } catch (error) {
      console.error('加载消息失败:', error);
      app.showError('加载失败，请重试');
    } finally {
      this.setData({ 
        loading: false
      });
      wx.stopPullDownRefresh();
    }
  },

  // 刷新消息
  refreshMessages() {
    this.setData({
      page: 1
    });
    this.loadMessages();
  },

  // 加载更多消息
  loadMoreMessages() {
    if (!this.data.hasMore || this.data.loading) return;

    this.setData({
      page: this.data.page + 1
    });
    this.loadMessages();
  },

  // 切换标签
  onTabTap(e) {
    const { tab } = e.currentTarget.dataset;
    
    if (tab === this.data.activeTab) return;

    this.setData({
      activeTab: tab,
      page: 1,
      messages: []
    });

    this.loadMessages(true);
  },

  // 获取未读数量
  async getUnreadCount() {
    try {
      const result = await wx.cloud.callFunction({
        name: 'message',
        data: {
          action: 'getUnreadCount'
        }
      });

      if (result.result && result.result.success) {
        this.setData({
          unreadCount: result.result.data.count || 0
        });

        // 设置tabBar徽章
        if (result.result.data.count > 0) {
          wx.setTabBarBadge({
            index: 2,
            text: result.result.data.count > 99 ? '99+' : result.result.data.count.toString()
          });
        } else {
          wx.removeTabBarBadge({
            index: 2
          });
        }
      }
    } catch (error) {
      console.error('获取未读消息数失败:', error);
    }
  },

  // 标记为已读
  async markAsRead(e) {
    const { messageid } = e.currentTarget.dataset;
    
    try {
      const result = await wx.cloud.callFunction({
        name: 'message',
        data: {
          action: 'markAsRead',
          messageId: messageid
        }
      });

      if (result.result && result.result.success) {
        // 更新本地状态
        const messages = this.data.messages.map(msg => 
          msg._id === messageid ? { ...msg, isRead: true } : msg
        );

        this.setData({ messages });

        // 更新未读数量
        this.getUnreadCount();

        app.showSuccess('已标记为已读');
      }
    } catch (error) {
      console.error('标记已读失败:', error);
      app.showError('操作失败');
    }
  },

  // 删除消息
  onDeleteMessage(e) {
    const { messageid } = e.currentTarget.dataset;
    
    wx.showModal({
      title: '确认删除',
      content: '确定要删除这条消息吗？',
      success: async (res) => {
        if (res.confirm) {
          await this.deleteMessage(messageid);
        }
      }
    });
  },

  // 执行删除
  async deleteMessage(messageId) {
    try {
      const result = await wx.cloud.callFunction({
        name: 'message',
        data: {
          action: 'deleteMessage',
          messageId: messageId
        }
      });

      if (result.result && result.result.success) {
        // 从列表中移除
        const messages = this.data.messages.filter(msg => msg._id !== messageId);
        this.setData({ messages });

        app.showSuccess('删除成功');
      } else {
        throw new Error(result.result.message || '删除失败');
      }
    } catch (error) {
      console.error('删除消息失败:', error);
      app.showError('删除失败');
    }
  },

  // 点击消息
  onMessageTap(e) {
    const { message } = e.currentTarget.dataset;
    
    // 根据消息类型处理点击事件
    switch (message.type) {
      case 'comment':
        // 跳转到帖子详情
        wx.navigateTo({
          url: `/pages/post-detail/index?id=${message.relatedId}`
        });
        break;
      case 'like':
        wx.navigateTo({
          url: `/pages/post-detail/index?id=${message.relatedId}`
        });
        break;
      case 'follow':
        // 跳转到用户主页
        wx.navigateTo({
          url: `/pages/profile/other?id=${message.senderId}`
        });
        break;
      case 'system':
        // 展开/收起系统消息
        this.toggleMessageExpand(message._id);
        break;
      default:
        break;
    }

    // 标记为已读
    if (!message.isRead) {
      this.markAsRead({ currentTarget: { dataset: { messageid: message._id } } });
    }
  },

  // 切换消息展开状态
  toggleMessageExpand(messageId) {
    const messages = this.data.messages.map(msg => 
      msg._id === messageId ? { ...msg, isExpanded: !msg.isExpanded } : msg
    );

    this.setData({ messages });
  },

  // 清空消息
  onClearAll() {
    wx.showModal({
      title: '确认清空',
      content: '确定要清空所有消息吗？',
      success: async (res) => {
        if (res.confirm) {
          await this.clearAllMessages();
        }
      }
    });
  },

  // 执行清空
  async clearAllMessages() {
    try {
      const result = await wx.cloud.callFunction({
        name: 'message',
        data: {
          action: 'clearAllMessages'
        }
      });

      if (result.result && result.result.success) {
        this.setData({
          messages: [],
          page: 1
        });

        app.showSuccess('清空成功');
      } else {
        throw new Error(result.result.message || '清空失败');
      }
    } catch (error) {
      console.error('清空消息失败:', error);
      app.showError('清空失败');
    }
  },

  // 跳转到聊天
  onChatTap() {
    wx.navigateTo({
      url: '/pages/chat/list'
    });
  },

  getMessageIcon(type) {
    return this.data.messageIconMap[type] || '📨';
  }
});

===== miniprogram\pages\message\index.json =====

{
  "navigationStyle": "custom",
  "backgroundColor": "#F8F9FA",
  "backgroundTextStyle": "dark",
  "enablePullDownRefresh": true,
  "usingComponents": {}
}

===== miniprogram\pages\message\index.wxml =====

<view class="message-page">
  <!-- 自定义导航栏 -->
  <view class="custom-nav" style="height: {{customNavHeight}}px">
    <view class="nav-content" style="height: 44px; padding-top: {{statusBarHeight}}px">
      <text class="nav-title">消息</text>
      <view class="nav-actions">
        <view class="nav-btn" bind:tap="onChatTap">
          <text class="btn-icon">💬</text>
        </view>
        <view class="nav-btn" bind:tap="onClearAll">
          <text class="btn-icon">🗑️</text>
        </view>
      </view>
    </view>
  </view>

  <view class="message-container" style="padding-top: {{customNavHeight}}px">
    <!-- 标签导航 -->
    <view class="message-tabs">
      <view class="tabs-container">
        <block wx:for="{{tabs}}" wx:key="id">
          <view 
            class="tab-item {{activeTab === item.id ? 'active' : ''}}"
            data-tab="{{item.id}}"
            bind:tap="onTabTap"
          >
            <text class="tab-name">{{item.name}}</text>
            <view class="tab-indicator"></view>
            <view class="unread-badge" wx:if="{{item.id === 'unread' && unreadCount > 0}}">
              {{unreadCount > 99 ? '99+' : unreadCount}}
            </view>
          </view>
        </block>
      </view>
    </view>

    <!-- 消息列表 -->
    <view class="message-list">
      <block wx:for="{{messages}}" wx:key="_id">
        <view 
          class="message-item {{item.isRead ? '' : 'unread'}}"
          data-message="{{item}}"
          bind:tap="onMessageTap"
        >
          <!-- 消息图标 -->
          <view class="message-icon">
            <text class="icon">{{this.getMessageIcon(item.type)}}</text>
            <view class="unread-dot" wx:if="{{!item.isRead}}"></view>
          </view>

          <!-- 消息内容 -->
          <view class="message-content">
            <view class="message-header">
              <text class="message-title">{{item.title}}</text>
              <text class="message-time">{{item.createTime}}</text>
            </view>
            <view class="message-body">
              <text class="message-text {{item.isExpanded ? 'expanded' : ''}}">
                {{item.content}}
              </text>
              <text 
                class="expand-btn" 
                wx:if="{{item.type === 'system' && item.content.length > 60}}"
                bind:tap="toggleMessageExpand"
                data-messageid="{{item._id}}"
              >
                {{item.isExpanded ? '收起' : '展开'}}
              </text>
            </view>
            <view class="message-extra" wx:if="{{item.extraInfo}}">
              <text class="extra-text">{{item.extraInfo}}</text>
            </view>
          </view>

          <!-- 操作按钮 -->
          <view class="message-actions">
            <view 
              class="action-btn read-btn" 
              wx:if="{{!item.isRead}}"
              data-messageid="{{item._id}}"
              bind:tap="markAsRead"
            >
              <text class="action-text">标为已读</text>
            </view>
            <view 
              class="action-btn delete-btn" 
              data-messageid="{{item._id}}"
              bind:tap="onDeleteMessage"
            >
              <text class="action-text">删除</text>
            </view>
          </view>
        </view>
      </block>
    </view>

    <!-- 加载状态 -->
    <view class="loading-state" wx:if="{{loading && messages.length > 0}}">
      <view class="loading-spinner"></view>
      <text class="loading-text">加载中...</text>
    </view>

    <!-- 没有更多 -->
    <view class="no-more" wx:if="{{!hasMore && messages.length > 0}}">
      <text class="no-more-text">没有更多消息了</text>
    </view>

    <!-- 空状态 -->
    <view class="empty-state" wx:if="{{!loading && messages.length === 0}}">
      <text class="empty-icon">💌</text>
      <text class="empty-text">暂无消息</text>
      <text class="empty-desc">当有新消息时会在这里显示</text>
    </view>
  </view>
</view>

===== miniprogram\pages\message\index.wxss =====

.message-page {
  min-height: 100vh;
  background: #F8F9FA;
}

.message-container {
  min-height: 100vh;
}

/* 自定义导航栏 */
.custom-nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20rpx);
  border-bottom: 1rpx solid rgba(0, 0, 0, 0.1);
}

.nav-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 32rpx;
}

.nav-title {
  font-size: 36rpx;
  font-weight: 700;
  color: #1a1a1a;
}

.nav-actions {
  display: flex;
  align-items: center;
  gap: 16rpx;
}

.nav-btn {
  width: 64rpx;
  height: 64rpx;
  border-radius: 50%;
  background: #f8f9fa;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.nav-btn:active {
  background: #e9ecef;
  transform: scale(0.95);
}

.btn-icon {
  font-size: 28rpx;
}

/* 消息标签 */
.message-tabs {
  background: white;
  border-bottom: 1rpx solid #f0f0f0;
  position: sticky;
  top: 0;
  z-index: 100;
}

.tabs-container {
  display: flex;
  padding: 0 32rpx;
}

.tab-item {
  flex: 1;
  padding: 24rpx 0;
  text-align: center;
  position: relative;
  transition: all 0.3s ease;
}

.tab-item.active .tab-name {
  color: #007AFF;
  font-weight: 600;
}

.tab-name {
  font-size: 30rpx;
  color: #666;
  transition: all 0.3s ease;
  position: relative;
}

.tab-indicator {
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 0;
  height: 4rpx;
  background: #007AFF;
  border-radius: 2rpx;
  transition: all 0.3s ease;
}

.tab-item.active .tab-indicator {
  width: 40rpx;
}

.unread-badge {
  position: absolute;
  top: 16rpx;
  right: 40rpx;
  background: #FF3B30;
  color: white;
  font-size: 20rpx;
  padding: 4rpx 12rpx;
  border-radius: 20rpx;
  min-width: 32rpx;
  text-align: center;
  line-height: 1;
}

/* 消息列表 */
.message-list {
  padding: 24rpx;
}

.message-item {
  display: flex;
  align-items: flex-start;
  background: white;
  border-radius: 20rpx;
  padding: 32rpx;
  margin-bottom: 24rpx;
  box-shadow: 0 4rpx 20rpx rgba(0, 0, 0, 0.06);
  transition: all 0.3s ease;
  position: relative;
}

.message-item:active {
  transform: scale(0.98);
  box-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.1);
}

.message-item.unread {
  background: #f8fbff;
  border-left: 6rpx solid #007AFF;
}

.message-item.unread::before {
  content: '';
  position: absolute;
  left: -6rpx;
  top: 50%;
  transform: translateY(-50%);
  width: 12rpx;
  height: 12rpx;
  background: #007AFF;
  border-radius: 50%;
}

/* 消息图标 */
.message-icon {
  position: relative;
  margin-right: 24rpx;
  flex-shrink: 0;
}

.icon {
  font-size: 48rpx;
  display: block;
}

.unread-dot {
  position: absolute;
  top: -4rpx;
  right: -4rpx;
  width: 16rpx;
  height: 16rpx;
  background: #FF3B30;
  border-radius: 50%;
  border: 2rpx solid white;
}

/* 消息内容 */
.message-content {
  flex: 1;
  min-width: 0;
}

.message-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 16rpx;
}

.message-title {
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
  flex: 1;
  margin-right: 16rpx;
}

.message-time {
  font-size: 24rpx;
  color: #999;
  flex-shrink: 0;
}

.message-body {
  margin-bottom: 12rpx;
}

.message-text {
  font-size: 28rpx;
  line-height: 1.5;
  color: #666;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.message-text:not(.expanded) {
  -webkit-line-clamp: 2;
}

.expand-btn {
  color: #007AFF;
  font-size: 26rpx;
  margin-left: 12rpx;
  font-weight: 500;
}

.message-extra {
  background: #f8f9fa;
  padding: 16rpx 20rpx;
  border-radius: 12rpx;
  margin-top: 12rpx;
}

.extra-text {
  font-size: 26rpx;
  color: #666;
  line-height: 1.4;
}

/* 操作按钮 */
.message-actions {
  display: flex;
  flex-direction: column;
  gap: 12rpx;
  margin-left: 24rpx;
  flex-shrink: 0;
}

.action-btn {
  padding: 12rpx 20rpx;
  border-radius: 16rpx;
  font-size: 24rpx;
  font-weight: 500;
  text-align: center;
  transition: all 0.3s ease;
  min-width: 120rpx;
}

.action-btn:active {
  transform: scale(0.95);
}

.read-btn {
  background: #007AFF;
  color: white;
}

.delete-btn {
  background: #f8f9fa;
  color: #666;
}

.action-text {
  font-size: 24rpx;
}

/* 加载状态 */
.loading-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 80rpx 0;
}

.loading-spinner {
  width: 48rpx;
  height: 48rpx;
  border: 4rpx solid #f0f0f0;
  border-top: 4rpx solid #007AFF;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 24rpx;
}

.loading-text {
  font-size: 28rpx;
  color: #999;
}

/* 没有更多 */
.no-more {
  text-align: center;
  padding: 60rpx 0;
}

.no-more-text {
  font-size: 28rpx;
  color: #999;
}

/* 空状态 */
.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 200rpx 0;
  text-align: center;
}

.empty-icon {
  font-size: 120rpx;
  margin-bottom: 32rpx;
  opacity: 0.5;
}

.empty-text {
  font-size: 32rpx;
  color: #666;
  margin-bottom: 16rpx;
}

.empty-desc {
  font-size: 28rpx;
  color: #999;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}


===== miniprogram\pages\payment\index.js =====

const app = getApp();

Page({
  data: {
    customNavHeight: 0,
    orderInfo: null,
    paymentMethods: [
      { id: 'wechat', name: '微信支付', icon: '💳', description: '推荐使用', selected: true },
      { id: 'balance', name: '余额支付', icon: '💰', description: '余额：0.00元', selected: false }
    ],
    agreeProtocol: false,
    paying: false
  },

  onLoad(options) {
    this.setData({
      customNavHeight: app.globalData.customNavHeight
    });

    // 获取订单信息，这里假设从options中获取订单id，然后从云函数获取订单详情
    const { orderId } = options;
    if (orderId) {
      this.loadOrderInfo(orderId);
    } else {
      // 如果没有订单id，可以使用模拟数据
      this.setData({
        orderInfo: {
          id: orderId || '1234567890',
          title: '测试商品',
          description: '这是一个测试商品描述',
          amount: 100, // 单位：分
          createTime: new Date().toISOString(),
            formattedAmount: (100 / 100).toFixed(2)
        }
      });
    }
  },

  // 加载订单信息
  async loadOrderInfo(orderId) {
    try {
      const result = await wx.cloud.callFunction({
        name: 'order',
        data: {
          action: 'getOrder',
          orderId: orderId
        }
      });

      if (result.result && result.result.success) {
        this.setData({
          orderInfo:{ data:result.result.data,
          formattedAmount: (result.result.data.amount / 100).toFixed(2)}
        });
      } else {
        throw new Error(result.result.message || '加载订单失败');
      }
    } catch (error) {
      console.error('加载订单失败:', error);
      app.showError('加载订单失败，请重试');
    }
  },

  // 选择支付方式
  onSelectPayment(e) {
    const { methodId } = e.currentTarget.dataset;
    const paymentMethods = this.data.paymentMethods.map(method => ({
      ...method,
      selected: method.id === methodId
    }));

    this.setData({ paymentMethods });
  },

  // 协议勾选
  onAgreeChange(e) {
    this.setData({
      agreeProtocol: e.detail.value.length > 0
    });
  },

  // 确认支付
  async onConfirmPayment() {
    const { orderInfo, paymentMethods, agreeProtocol, paying } = this.data;

    if (paying) return;

    if (!agreeProtocol) {
      app.showError('请先同意支付协议');
      return;
    }

    const selectedMethod = paymentMethods.find(method => method.selected);
    if (!selectedMethod) {
      app.showError('请选择支付方式');
      return;
    }

    this.setData({ paying: true });
    app.showLoading('支付中...');

    try {
      let result;
      if (selectedMethod.id === 'wechat') {
        result = await this.wechatPayment();
      } else if (selectedMethod.id === 'balance') {
        result = await this.balancePayment();
      }

      if (result && result.success) {
        app.showSuccess('支付成功');
        
        // 延迟跳转
        setTimeout(() => {
          wx.redirectTo({
            url: `/pages/payment/success?orderId=${orderInfo.id}`
          });
        }, 1500);
      } else {
        throw new Error(result?.message || '支付失败');
      }
    } catch (error) {
      console.error('支付失败:', error);
      app.showError('支付失败，请重试');
    } finally {
      this.setData({ paying: false });
      wx.hideLoading();
    }
  },

  // 微信支付
  async wechatPayment() {
    // 这里调用云函数生成微信支付参数
    const result = await wx.cloud.callFunction({
      name: 'payment',
      data: {
        action: 'unifiedOrder',
        orderId: this.data.orderInfo.id,
        amount: this.data.orderInfo.amount
      }
    });

    if (result.result && result.result.success) {
      const paymentData = result.result.data;
      
      // 调用微信支付
      return new Promise((resolve, reject) => {
        wx.requestPayment({
          ...paymentData,
          success: (res) => {
            resolve({ success: true });
          },
          fail: (err) => {
            reject(err);
          }
        });
      });
    } else {
      throw new Error(result.result.message || '支付参数生成失败');
    }
  },

  // 余额支付
  async balancePayment() {
    // 调用云函数进行余额支付
    const result = await wx.cloud.callFunction({
      name: 'payment',
      data: {
        action: 'balancePayment',
        orderId: this.data.orderInfo.id
      }
    });

    if (result.result && result.result.success) {
      return { success: true };
    } else {
      throw new Error(result.result.message || '余额支付失败');
    }
  },

  // 取消支付
  onCancelPayment() {
    wx.showModal({
      title: '确认取消',
      content: '确定要取消支付吗？',
      success: (res) => {
        if (res.confirm) {
          wx.navigateBack();
        }
      }
    });
  },

  // 查看协议
  onViewProtocol() {
    wx.navigateTo({
      url: '/pages/webview/index?url=https://your-domain.com/payment-protocol'
    });
  }
});

===== miniprogram\pages\payment\index.json =====

{
  "navigationStyle": "custom",
  "backgroundColor": "#F8F9FA",
  "backgroundTextStyle": "dark",
  "enablePullDownRefresh": false,
  "usingComponents": {}
}

===== miniprogram\pages\payment\index.wxml =====

<view class="payment-page">
  <!-- 自定义导航栏 -->
  <view class="custom-nav" style="height: {{customNavHeight}}px">
    <view class="nav-content" style="height: 44px; padding-top: {{statusBarHeight}}px">
      <view class="nav-back" bind:tap="onCancelPayment">
        <text class="back-icon">‹</text>
      </view>
      <text class="nav-title">确认支付</text>
      <view class="nav-actions"></view>
    </view>
  </view>

  <view class="payment-container" style="padding-top: {{customNavHeight}}px">
    <!-- 订单信息 -->
    <view class="order-section">
      <view class="order-card">
        <view class="order-header">
          <text class="order-title">订单信息</text>
          <text class="order-amount">¥{{orderInfo.formattedAmount}}</text>
        </view>
        <view class="order-body">
          <text class="product-title">{{orderInfo.title}}</text>
          <text class="product-desc">{{orderInfo.description}}</text>
        </view>
        <view class="order-footer">
          <text class="order-id">订单号：{{orderInfo.id}}</text>
          <text class="order-time">创建时间：{{orderInfo.createTime}}</text>
        </view>
      </view>
    </view>

    <!-- 支付方式 -->
    <view class="payment-methods">
      <view class="section-title">选择支付方式</view>
      <view class="methods-list">
        <block wx:for="{{paymentMethods}}" wx:key="id">
          <view 
            class="method-item {{item.selected ? 'selected' : ''}}"
            data-method-id="{{item.id}}"
            bind:tap="onSelectPayment"
          >
            <view class="method-icon">
              <text class="icon">{{item.icon}}</text>
            </view>
            <view class="method-info">
              <text class="method-name">{{item.name}}</text>
              <text class="method-desc">{{item.description}}</text>
            </view>
            <view class="method-radio">
              <view class="radio {{item.selected ? 'selected' : ''}}"></view>
            </view>
          </view>
        </block>
      </view>
    </view>

    <!-- 支付协议 -->
    <view class="protocol-section">
      <label class="protocol-checkbox">
        <checkbox 
          checked="{{agreeProtocol}}" 
          bindchange="onAgreeChange"
          color="#007AFF"
        />
        <text class="protocol-text">
          我已阅读并同意
          <text class="protocol-link" bind:tap="onViewProtocol">《支付协议》</text>
        </text>
      </label>
    </view>

    <!-- 底部支付按钮 -->
    <view class="bottom-actions">
      <view class="payment-info">
        <text class="payment-label">需支付</text>
        <text class="order-amount">¥{{orderInfo.formattedAmount}}</text>
      </view>
      <view 
        class="payment-btn {{agreeProtocol && !paying ? 'active' : ''}} {{paying ? 'disabled' : ''}}"
        bind:tap="onConfirmPayment"
      >
        <text class="payment-btn-text">
          {{paying ? '支付中...' : '确认支付'}}
        </text>
      </view>
    </view>
  </view>

  <!-- 支付加载遮罩 -->
  <view class="payment-mask" wx:if="{{paying}}">
    <view class="payment-loading">
      <view class="loading-spinner"></view>
      <text class="loading-text">支付中...</text>
    </view>
  </view>
</view>

===== miniprogram\pages\payment\index.wxss =====

.payment-page {
  min-height: 100vh;
  background: #F8F9FA;
}

.payment-container {
  min-height: 100vh;
  padding-bottom: 140rpx;
}

/* 自定义导航栏 */
.custom-nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20rpx);
  border-bottom: 1rpx solid rgba(0, 0, 0, 0.1);
}

.nav-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 32rpx;
}

.nav-back {
  width: 64rpx;
  height: 64rpx;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.nav-back:active {
  background: #f0f0f0;
}

.back-icon {
  font-size: 40rpx;
  color: #1a1a1a;
  font-weight: 300;
}

.nav-title {
  font-size: 36rpx;
  font-weight: 700;
  color: #1a1a1a;
}

.nav-actions {
  width: 64rpx; /* 占位 */
}

/* 订单信息 */
.order-section {
  padding: 32rpx;
}

.order-card {
  background: white;
  border-radius: 20rpx;
  padding: 32rpx;
  box-shadow: 0 8rpx 40rpx rgba(0, 0, 0, 0.06);
}

.order-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24rpx;
  padding-bottom: 24rpx;
  border-bottom: 1rpx solid #f0f0f0;
}

.order-title {
  font-size: 28rpx;
  color: #666;
}

.order-amount {
  font-size: 36rpx;
  font-weight: 700;
  color: #FF3B30;
}

.order-body {
  margin-bottom: 24rpx;
}

.product-title {
  display: block;
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 12rpx;
}

.product-desc {
  display: block;
  font-size: 26rpx;
  color: #666;
  line-height: 1.4;
}

.order-footer {
  display: flex;
  flex-direction: column;
  gap: 8rpx;
}

.order-id, .order-time {
  font-size: 24rpx;
  color: #999;
}

/* 支付方式 */
.payment-methods {
  padding: 0 32rpx;
  margin-bottom: 40rpx;
}

.section-title {
  font-size: 28rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 24rpx;
}

.methods-list {
  background: white;
  border-radius: 20rpx;
  overflow: hidden;
  box-shadow: 0 8rpx 40rpx rgba(0, 0, 0, 0.06);
}

.method-item {
  display: flex;
  align-items: center;
  padding: 32rpx;
  border-bottom: 1rpx solid #f8f9fa;
  transition: all 0.3s ease;
}

.method-item:active {
  background: #f8f9fa;
}

.method-item:last-child {
  border-bottom: none;
}

.method-item.selected {
  background: #f8fbff;
}

.method-icon {
  margin-right: 24rpx;
}

.icon {
  font-size: 48rpx;
}

.method-info {
  flex: 1;
}

.method-name {
  display: block;
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 8rpx;
}

.method-desc {
  display: block;
  font-size: 24rpx;
  color: #999;
}

.method-radio {
  margin-left: 24rpx;
}

.radio {
  width: 40rpx;
  height: 40rpx;
  border: 2rpx solid #e0e0e0;
  border-radius: 50%;
  position: relative;
  transition: all 0.3s ease;
}

.radio.selected {
  border-color: #007AFF;
  background: #007AFF;
}

.radio.selected::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 20rpx;
  height: 20rpx;
  background: white;
  border-radius: 50%;
}

/* 支付协议 */
.protocol-section {
  padding: 0 32rpx;
}

.protocol-checkbox {
  display: flex;
  align-items: flex-start;
  font-size: 24rpx;
  color: #666;
  line-height: 1.4;
}

.protocol-text {
  margin-left: 16rpx;
}

.protocol-link {
  color: #007AFF;
}

/* 底部支付按钮 */
.bottom-actions {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: white;
  border-top: 1rpx solid #f0f0f0;
  padding: 24rpx 32rpx;
  padding-bottom: calc(24rpx + env(safe-area-inset-bottom));
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.payment-info {
  display: flex;
  flex-direction: column;
}

.payment-label {
  font-size: 24rpx;
  color: #666;
  margin-bottom: 4rpx;
}

.payment-amount {
  font-size: 36rpx;
  font-weight: 700;
  color: #FF3B30;
}

.payment-btn {
  padding: 24rpx 48rpx;
  background: #f8f9fa;
  border-radius: 50rpx;
  transition: all 0.3s ease;
}

.payment-btn.active {
  background: linear-gradient(135deg, #007AFF 0%, #5856D6 100%);
}

.payment-btn.disabled {
  opacity: 0.5;
  pointer-events: none;
}

.payment-btn:active {
  transform: scale(0.98);
}

.payment-btn-text {
  font-size: 32rpx;
  font-weight: 600;
  color: #999;
}

.payment-btn.active .payment-btn-text {
  color: white;
}

/* 支付加载遮罩 */
.payment-mask {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
}

.payment-loading {
  background: white;
  padding: 64rpx;
  border-radius: 24rpx;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.loading-spinner {
  width: 80rpx;
  height: 80rpx;
  border: 4rpx solid #f0f0f0;
  border-top: 4rpx solid #007AFF;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 32rpx;
}

.loading-text {
  font-size: 28rpx;
  color: #666;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

===== miniprogram\pages\payment\success.js =====

const app = getApp();

Page({
  data: {
    customNavHeight: 0,
    orderInfo: null,
    success: false
  },

  onLoad(options) {
    this.setData({
      customNavHeight: app.globalData.customNavHeight
    });

    const { orderId, amount } = options;
    this.setData({
      orderInfo: {
        id: orderId,
        amount: amount ? (amount / 100).toFixed(2) : '0.00'
      },
      success: true
    });

    // 自动跳转倒计时
    this.startRedirectCountdown();
  },

  // 开始跳转倒计时
  startRedirectCountdown() {
    let countdown = 5;
    
    const timer = setInterval(() => {
      countdown--;
      
      if (countdown <= 0) {
        clearInterval(timer);
        this.redirectToHome();
      }
    }, 1000);
  },

  // 查看订单
  onViewOrder() {
    wx.redirectTo({
      url: `/pages/order/detail?id=${this.data.orderInfo.id}`
    });
  },

  // 返回首页
  onBackToHome() {
    this.redirectToHome();
  },

  // 跳转到首页
  redirectToHome() {
    wx.switchTab({
      url: '/pages/posts/index'
    });
  },

  // 继续购物/浏览
  onContinue() {
    wx.navigateBack({
      delta: 2
    });
  }
});

===== miniprogram\pages\payment\success.json =====

{
  "navigationStyle": "custom",
  "backgroundColor": "#FFFFFF",
  "backgroundTextStyle": "dark",
  "enablePullDownRefresh": false
}

===== miniprogram\pages\payment\success.wxml =====

<view class="success-page">
  <!-- 自定义导航栏 -->
  <view class="custom-nav" style="height: {{customNavHeight}}px">
    <view class="nav-content" style="height: 44px; padding-top: {{statusBarHeight}}px">
      <text class="nav-title">支付成功</text>
    </view>
  </view>

  <view class="success-container" style="padding-top: {{customNavHeight}}px">
    <!-- 成功图标 -->
    <view class="success-icon">
      <text class="icon">✅</text>
    </view>

    <!-- 成功信息 -->
    <view class="success-message">
      <text class="message-title">支付成功</text>
      <text class="message-amount">¥{{orderInfo.amount}}</text>
      <text class="message-desc">感谢您的购买，我们已开始处理您的订单</text>
    </view>

    <!-- 订单信息 -->
    <view class="order-info">
      <view class="info-item">
        <text class="info-label">订单编号</text>
        <text class="info-value">{{orderInfo.id}}</text>
      </view>
      <view class="info-item">
        <text class="info-label">支付时间</text>
        <text class="info-value">{{new Date().toLocaleString()}}</text>
      </view>
    </view>

    <!-- 操作按钮 -->
    <view class="action-buttons">
      <view class="btn btn-outline" bind:tap="onViewOrder">
        <text class="btn-text">查看订单</text>
      </view>
      <view class="btn btn-primary" bind:tap="onContinue">
        <text class="btn-text">继续浏览</text>
      </view>
    </view>

    <!-- 自动跳转提示 -->
    <view class="auto-redirect">
      <text class="redirect-text">5秒后自动返回首页</text>
    </view>
  </view>
</view>

===== miniprogram\pages\payment\success.wxss =====

.success-page {
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.success-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 0 48rpx;
  text-align: center;
}

/* 自定义导航栏 */
.custom-nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: transparent;
}

.nav-content {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 32rpx;
}

.nav-title {
  font-size: 36rpx;
  font-weight: 700;
  color: white;
}

/* 成功图标 */
.success-icon {
  margin-bottom: 48rpx;
}

.icon {
  font-size: 120rpx;
}

/* 成功信息 */
.success-message {
  margin-bottom: 64rpx;
}

.message-title {
  display: block;
  font-size: 48rpx;
  font-weight: 700;
  margin-bottom: 24rpx;
}

.message-amount {
  display: block;
  font-size: 64rpx;
  font-weight: 700;
  margin-bottom: 32rpx;
}

.message-desc {
  display: block;
  font-size: 28rpx;
  opacity: 0.9;
  line-height: 1.5;
}

/* 订单信息 */
.order-info {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20rpx);
  border-radius: 20rpx;
  padding: 32rpx;
  margin-bottom: 64rpx;
  width: 100%;
  max-width: 500rpx;
}

.info-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24rpx;
}

.info-item:last-child {
  margin-bottom: 0;
}

.info-label {
  font-size: 28rpx;
  opacity: 0.8;
}

.info-value {
  font-size: 28rpx;
  font-weight: 600;
}

/* 操作按钮 */
.action-buttons {
  display: flex;
  gap: 24rpx;
  margin-bottom: 48rpx;
  width: 100%;
  max-width: 500rpx;
}

.btn {
  flex: 1;
  padding: 24rpx 32rpx;
  border-radius: 50rpx;
  font-size: 32rpx;
  font-weight: 600;
  text-align: center;
  transition: all 0.3s ease;
}

.btn:active {
  transform: scale(0.98);
}

.btn-outline {
  background: transparent;
  border: 2rpx solid rgba(255, 255, 255, 0.3);
  color: white;
}

.btn-primary {
  background: white;
  color: #667eea;
}

.btn-text {
  font-weight: 600;
}

/* 自动跳转 */
.auto-redirect {
  margin-top: auto;
  padding-bottom: 64rpx;
}

.redirect-text {
  font-size: 24rpx;
  opacity: 0.7;
}

===== miniprogram\pages\post-detail\index.js =====

const app = getApp();
const FormatTime = require('../../utils/formatTime.js');

Page({
  data: {
    customNavHeight: 0,
    postId: '',
    post: null,
    comments: [],
    loading: false,
    commentLoading: false,
    hasMore: true,
    page: 1,
    pageSize: 10,
    commentText: '',
    replyingTo: null,
    showCommentInput: false,
    liked: false,
    likeCount: 0,
    collected: false,
    shareMenu: false
  },

  onLoad(options) {
    const { id } = options;
    this.setData({
      customNavHeight: app.globalData.customNavHeight,
      postId: id
    });

    this.loadPostDetail();
    this.loadComments();
  },

  onShow() {
    // 检查登录状态
    if (!app.globalData.isLoggedIn) {
      wx.redirectTo({
        url: '/pages/auth/index'
      });
      return;
    }
  },

  onPullDownRefresh() {
    this.refreshData();
  },

  onReachBottom() {
    this.loadMoreComments();
  },

  // 加载帖子详情
  async loadPostDetail() {
    this.setData({ loading: true });

    try {
      const result = await wx.cloud.callFunction({
        name: 'post',
        data: {
          action: 'getPostDetail',
          postId: this.data.postId
        }
      });

      if (result.result && result.result.success) {
        const post = result.result.data;
        this.setData({
          post: {
            ...post,
            createTime: FormatTime.friendlyTime(post.createTime)
          },
          liked: post.isLiked,
          likeCount: post.likeCount,
          collected: post.isCollected
        });
      } else {
        throw new Error(result.result.message || '加载失败');
      }
    } catch (error) {
      console.error('加载帖子详情失败:', error);
      app.showError('加载失败，请重试');
    } finally {
      this.setData({ loading: false });
      wx.stopPullDownRefresh();
    }
  },

  // 加载评论
  async loadComments(showLoading = false) {
    if (this.data.commentLoading) return;

    this.setData({ commentLoading: true });

    if (showLoading) {
      app.showLoading('加载中...');
    }

    try {
      const result = await wx.cloud.callFunction({
        name: 'comment',
        data: {
          action: 'getComments',
          postId: this.data.postId,
          page: this.data.page,
          pageSize: this.data.pageSize
        }
      });

      if (result.result && result.result.success) {
        const { comments, hasMore } = result.result.data;
        
        const formattedComments = comments.map(comment => ({
          ...comment,
          createTime: FormatTime.friendlyTime(comment.createTime),
          replies: comment.replies ? comment.replies.map(reply => ({
            ...reply,
            createTime: FormatTime.friendlyTime(reply.createTime)
          })) : []
        }));

        this.setData({
          comments: this.data.page === 1 ? formattedComments : [...this.data.comments, ...formattedComments],
          hasMore: hasMore
        });

        if (showLoading) {
          wx.hideLoading();
        }
      } else {
        throw new Error(result.result.message || '加载失败');
      }
    } catch (error) {
      console.error('加载评论失败:', error);
      app.showError('加载失败，请重试');
    } finally {
      this.setData({ commentLoading: false });
    }
  },

  // 刷新数据
  refreshData() {
    this.setData({
      page: 1
    });
    this.loadPostDetail();
    this.loadComments();
  },

  // 加载更多评论
  loadMoreComments() {
    if (!this.data.hasMore || this.data.commentLoading) return;

    this.setData({
      page: this.data.page + 1
    });
    this.loadComments();
  },

  // 点赞帖子
  async onLikePost() {
    const { liked, likeCount, postId } = this.data;
    const newLiked = !liked;
    const newLikeCount = newLiked ? likeCount + 1 : likeCount - 1;

    // 立即更新UI
    this.setData({
      liked: newLiked,
      likeCount: newLikeCount
    });

    try {
      const result = await wx.cloud.callFunction({
        name: 'post',
        data: {
          action: 'likePost',
          postId: postId,
          isLiked: newLiked
        }
      });

      if (!result.result.success) {
        // 回退状态
        this.setData({
          liked: !newLiked,
          likeCount: newLiked ? newLikeCount - 1 : newLikeCount + 1
        });
        app.showError('操作失败');
      }
    } catch (error) {
      console.error('点赞失败:', error);
      // 回退状态
      this.setData({
        liked: !newLiked,
        likeCount: newLiked ? newLikeCount - 1 : newLikeCount + 1
      });
      app.showError('操作失败');
    }
  },

  // 收藏帖子
  async onCollectPost() {
    const { collected, postId } = this.data;
    const newCollected = !collected;

    // 立即更新UI
    this.setData({ collected: newCollected });

    try {
      const result = await wx.cloud.callFunction({
        name: 'post',
        data: {
          action: 'collectPost',
          postId: postId,
          isCollected: newCollected
        }
      });

      if (result.result.success) {
        app.showSuccess(newCollected ? '收藏成功' : '已取消收藏');
      } else {
        // 回退状态
        this.setData({ collected: !newCollected });
        app.showError('操作失败');
      }
    } catch (error) {
      console.error('收藏失败:', error);
      // 回退状态
      this.setData({ collected: !newCollected });
      app.showError('操作失败');
    }
  },

  // 显示评论输入框
  onShowCommentInput() {
    this.setData({
      showCommentInput: true,
      replyingTo: null,
      commentText: ''
    });
  },

  // 回复评论
  onReplyComment(e) {
    const { comment } = e.detail;
    this.setData({
      showCommentInput: true,
      replyingTo: comment,
      commentText: `@${comment.authorName} `
    });
  },

  // 输入评论
  onCommentInput(e) {
    this.setData({
      commentText: e.detail.value
    });
  },

  // 提交评论
  async onSubmitComment() {
    const { commentText, replyingTo, postId } = this.data;

    if (!commentText.trim()) {
      app.showError('请输入评论内容');
      return;
    }

    const commentData = {
      postId: postId,
      content: commentText.trim()
    };

    if (replyingTo) {
      commentData.replyTo = replyingTo._id;
      commentData.replyToName = replyingTo.authorName;
    }

    try {
      const result = await wx.cloud.callFunction({
        name: 'comment',
        data: {
          action: 'createComment',
          ...commentData
        }
      });

      if (result.result && result.result.success) {
        this.setData({
          commentText: '',
          showCommentInput: false,
          replyingTo: null,
          page: 1
        });

        app.showSuccess(replyingTo ? '回复成功' : '评论成功');
        
        // 重新加载评论
        this.loadComments();
      } else {
        throw new Error(result.result.message || '评论失败');
      }
    } catch (error) {
      console.error('评论失败:', error);
      app.showError('评论失败，请重试');
    }
  },

  // 点赞评论
  async onLikeComment(e) {
    const { commentid, liked } = e.detail;
    
    try {
      const result = await wx.cloud.callFunction({
        name: 'comment',
        data: {
          action: 'likeComment',
          commentId: commentid,
          isLiked: liked
        }
      });

      if (!result.result.success) {
        app.showError('操作失败');
      }
    } catch (error) {
      console.error('点赞评论失败:', error);
      app.showError('操作失败');
    }
  },

  // 显示分享菜单
  onShowShareMenu() {
    this.setData({ shareMenu: true });
  },

  // 隐藏分享菜单
  onHideShareMenu() {
    this.setData({ shareMenu: false });
  },

  // 分享帖子
  onSharePost() {
    this.setData({ shareMenu: false });
    
    // 这里可以调用微信的分享功能
    app.showSuccess('已生成分享卡片');
  },

  // 复制链接
  onCopyLink() {
    const link = `https://your-domain.com/post/${this.data.postId}`;
    wx.setClipboardData({
      data: link,
      success: () => {
        app.showSuccess('链接已复制');
        this.setData({ shareMenu: false });
      }
    });
  },

  // 举报帖子
  onReportPost() {
    wx.showModal({
      title: '举报帖子',
      content: '请选择举报原因',
      confirmText: '确定举报',
      success: (res) => {
        if (res.confirm) {
          this.reportPost();
        }
      }
    });
  },

  // 执行举报
  async reportPost() {
    try {
      const result = await wx.cloud.callFunction({
        name: 'post',
        data: {
          action: 'reportPost',
          postId: this.data.postId
        }
      });

      if (result.result && result.result.success) {
        app.showSuccess('举报成功，我们会尽快处理');
      } else {
        throw new Error(result.result.message || '举报失败');
      }
    } catch (error) {
      console.error('举报失败:', error);
      app.showError('举报失败，请重试');
    }
  },

  // 点击用户头像
  onAvatarTap(e) {
    const { userid } = e.detail;
    wx.navigateTo({
      url: `/pages/profile/other?id=${userid}`
    });
  },

  // 返回上一页
  onNavigateBack() {
    wx.navigateBack();
  }
});

===== miniprogram\pages\post-detail\index.json =====

{
  "navigationStyle": "custom",
  "backgroundColor": "#F8F9FA",
  "backgroundTextStyle": "dark",
  "enablePullDownRefresh": true,
  "usingComponents": {
    "comment-list": "/components/comment-list/comment-list"
  }
}

===== miniprogram\pages\post-detail\index.wxml =====

<view class="post-detail-page">
  <!-- 自定义导航栏 -->
  <view class="custom-nav" style="height: {{customNavHeight}}px">
    <view class="nav-content" style="height: 44px; padding-top: {{statusBarHeight}}px">
      <view class="nav-back" bind:tap="onNavigateBack">
        <text class="back-icon">‹</text>
      </view>
      <text class="nav-title">帖子详情</text>
      <view class="nav-actions">
        <view class="nav-btn" bind:tap="onShowShareMenu">
          <text class="btn-icon">↗️</text>
        </view>
      </view>
    </view>
  </view>

  <view class="detail-container" style="padding-top: {{customNavHeight}}px">
    <!-- 加载状态 -->
    <view class="loading-state" wx:if="{{loading}}">
      <view class="loading-spinner"></view>
      <text class="loading-text">加载中...</text>
    </view>

    <!-- 帖子内容 -->
    <view class="post-content" wx:if="{{!loading && post}}">
      <!-- 作者信息 -->
      <view class="author-section">
        <view class="author-info">
          <image 
            class="author-avatar" 
            src="{{post.authorAvatar || '/images/default-avatar.png'}}"
            data-user-id="{{post.authorId}}"
            bind:tap="onAvatarTap"
          />
          <view class="author-details">
            <text class="author-name">{{post.authorName}}</text>
            <text class="post-time">{{post.createTime}}</text>
          </view>
        </view>
        <view class="post-tag {{post.tag || 'default'}}">
          {{post.tag || '分享'}}
        </view>
      </view>

      <!-- 帖子内容 -->
      <view class="content-section">
        <text class="content-text">{{post.content}}</text>
      </view>

      <!-- 图片展示 -->
      <view class="image-section" wx:if="{{post.images && post.images.length > 0}}">
        <view class="image-grid image-grid-{{post.images.length > 1 ? 'multiple' : 'single'}}">
          <block wx:for="{{post.images}}" wx:key="index">
            <image 
              class="post-image {{post.images.length === 1 ? 'single-image' : ''}}"
              src="{{item}}"
              mode="aspectFill"
            />
          </block>
        </view>
      </view>

      <!-- 位置信息 -->
      <view class="location-section" wx:if="{{post.location}}">
        <view class="location-info">
          <text class="location-icon">📍</text>
          <text class="location-text">{{post.location}}</text>
        </view>
      </view>

      <!-- 互动统计 -->
      <view class="stats-section">
        <view class="stats-item">
          <text class="stats-number">{{likeCount}}</text>
          <text class="stats-label">点赞</text>
        </view>
        <view class="stats-item">
          <text class="stats-number">{{post.commentCount || 0}}</text>
          <text class="stats-label">评论</text>
        </view>
        <view class="stats-item">
          <text class="stats-number">{{post.viewCount || 0}}</text>
          <text class="stats-label">浏览</text>
        </view>
      </view>

      <!-- 操作按钮 -->
      <view class="action-section">
        <view class="action-buttons">
          <view class="action-btn {{liked ? 'active' : ''}}" bind:tap="onLikePost">
            <text class="action-icon">{{liked ? '❤️' : '🤍'}}</text>
            <text class="action-text">点赞</text>
          </view>
          <view class="action-btn" bind:tap="onShowCommentInput">
            <text class="action-icon">💬</text>
            <text class="action-text">评论</text>
          </view>
          <view class="action-btn {{collected ? 'active' : ''}}" bind:tap="onCollectPost">
            <text class="action-icon">{{collected ? '⭐' : '☆'}}</text>
            <text class="action-text">收藏</text>
          </view>
          <view class="action-btn" bind:tap="onShowShareMenu">
            <text class="action-icon">↗️</text>
            <text class="action-text">分享</text>
          </view>
        </view>
      </view>
    </view>

    <!-- 评论列表 -->
    <view class="comments-section" wx:if="{{!loading}}">
      <comment-list 
        comments="{{comments}}"
        postId="{{postId}}"
        bind:reply="onReplyComment"
        bind:likeComment="onLikeComment"
        bind:avatarTap="onAvatarTap"
      />

      <!-- 评论加载状态 -->
      <view class="loading-state" wx:if="{{commentLoading && comments.length > 0}}">
        <view class="loading-spinner"></view>
        <text class="loading-text">加载中...</text>
      </view>

      <!-- 没有更多评论 -->
      <view class="no-more" wx:if="{{!hasMore && comments.length > 0}}">
        <text class="no-more-text">没有更多评论了</text>
      </view>

      <!-- 空评论 -->
      <view class="empty-comments" wx:if="{{!commentLoading && comments.length === 0}}">
        <text class="empty-icon">💬</text>
        <text class="empty-text">暂无评论</text>
        <text class="empty-desc">快来发表第一条评论吧</text>
      </view>
    </view>
  </view>

  <!-- 评论输入框 -->
  <view class="comment-input-section {{showCommentInput ? 'show' : ''}}">
    <view class="comment-input-container">
      <view class="input-header" wx:if="{{replyingTo}}">
        <text class="reply-text">回复 @{{replyingTo.authorName}}</text>
        <view class="cancel-reply" bind:tap="onShowCommentInput">
          <text class="cancel-text">取消回复</text>
        </view>
      </view>
      <view class="input-content">
        <textarea 
          class="comment-textarea" 
          placeholder="{{replyingTo ? '回复 ' + replyingTo.authorName : '说点什么...'}}"
          value="{{commentText}}"
          bindinput="onCommentInput"
          maxlength="500"
          show-confirm-bar="{{false}}"
          auto-focus
        />
        <view 
          class="submit-btn {{commentText.trim() ? 'active' : ''}}"
          bind:tap="onSubmitComment"
        >
          <text class="submit-text">发送</text>
        </view>
      </view>
    </view>
  </view>

  <!-- 底部操作栏 -->
  <view class="bottom-actions" wx:if="{{!showCommentInput}}">
    <view class="action-input" bind:tap="onShowCommentInput">
      <text class="input-placeholder">说点什么...</text>
    </view>
    <view class="action-buttons">
      <view class="action-btn {{liked ? 'active' : ''}}" bind:tap="onLikePost">
        <text class="action-icon">{{liked ? '❤️' : '🤍'}}</text>
        <text class="action-count">{{likeCount}}</text>
      </view>
      <view class="action-btn" bind:tap="onShowCommentInput">
        <text class="action-icon">💬</text>
        <text class="action-count">{{post ? post.commentCount : 0}}</text>
      </view>
      <view class="action-btn {{collected ? 'active' : ''}}" bind:tap="onCollectPost">
        <text class="action-icon">{{collected ? '⭐' : '☆'}}</text>
      </view>
    </view>
  </view>

  <!-- 分享菜单 -->
  <view class="share-menu {{shareMenu ? 'show' : ''}}">
    <view class="menu-mask" bind:tap="onHideShareMenu"></view>
    <view class="menu-content">
      <view class="menu-header">
        <text class="menu-title">分享到</text>
      </view>
      <view class="menu-options">
        <view class="menu-option" bind:tap="onSharePost">
          <view class="option-icon">👥</view>
          <text class="option-text">微信好友</text>
        </view>
        <view class="menu-option" bind:tap="onCopyLink">
          <view class="option-icon">🔗</view>
          <text class="option-text">复制链接</text>
        </view>
        <view class="menu-option" bind:tap="onReportPost">
          <view class="option-icon">🚫</view>
          <text class="option-text">举报</text>
        </view>
      </view>
      <view class="menu-cancel" bind:tap="onHideShareMenu">
        <text class="cancel-text">取消</text>
      </view>
    </view>
  </view>
</view>

===== miniprogram\pages\post-detail\index.wxss =====

.post-detail-page {
  min-height: 100vh;
  background: #F8F9FA;
}

.detail-container {
  min-height: 100vh;
  padding-bottom: 120rpx;
}

/* 自定义导航栏 */
.custom-nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20rpx);
  border-bottom: 1rpx solid rgba(0, 0, 0, 0.1);
}

.nav-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 32rpx;
}

.nav-back {
  width: 64rpx;
  height: 64rpx;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.nav-back:active {
  background: #f0f0f0;
}

.back-icon {
  font-size: 40rpx;
  color: #1a1a1a;
  font-weight: 300;
}

.nav-title {
  font-size: 36rpx;
  font-weight: 700;
  color: #1a1a1a;
}

.nav-actions {
  display: flex;
  align-items: center;
}

.nav-btn {
  width: 64rpx;
  height: 64rpx;
  border-radius: 50%;
  background: #f8f9fa;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.nav-btn:active {
  background: #e9ecef;
  transform: scale(0.95);
}

.btn-icon {
  font-size: 28rpx;
}

/* 帖子内容 */
.post-content {
  background: white;
  border-radius: 0 0 20rpx 20rpx;
  margin-bottom: 24rpx;
  padding: 32rpx;
}

/* 作者信息 */
.author-section {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 24rpx;
}

.author-info {
  display: flex;
  align-items: center;
  flex: 1;
}

.author-avatar {
  width: 80rpx;
  height: 80rpx;
  border-radius: 50%;
  margin-right: 20rpx;
}

.author-details {
  display: flex;
  flex-direction: column;
}

.author-name {
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 8rpx;
}

.post-time {
  font-size: 24rpx;
  color: #999;
}

.post-tag {
  padding: 8rpx 20rpx;
  border-radius: 20rpx;
  font-size: 24rpx;
  font-weight: 500;
  color: white;
}

.post-tag.default {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.post-tag.hot {
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
}

.post-tag.new {
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
}

/* 内容区域 */
.content-section {
  margin-bottom: 24rpx;
}

.content-text {
  font-size: 30rpx;
  line-height: 1.6;
  color: #333;
}

/* 图片区域 */
.image-section {
  margin-bottom: 24rpx;
}

.image-grid {
  border-radius: 16rpx;
  overflow: hidden;
}

.image-grid-multiple {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rpx;
}

.post-image {
  width: 100%;
  background-color: #f8f9fa;
}

.single-image {
  height: 400rpx;
  border-radius: 16rpx;
}

.image-grid-multiple .post-image {
  height: 300rpx;
}

/* 位置信息 */
.location-section {
  margin-bottom: 24rpx;
}

.location-info {
  display: flex;
  align-items: center;
  padding: 16rpx 20rpx;
  background: #f8f9fa;
  border-radius: 12rpx;
}

.location-icon {
  font-size: 24rpx;
  margin-right: 12rpx;
}

.location-text {
  font-size: 26rpx;
  color: #666;
}

/* 统计信息 */
.stats-section {
  display: flex;
  justify-content: space-around;
  padding: 24rpx 0;
  border-top: 1rpx solid #f0f0f0;
  border-bottom: 1rpx solid #f0f0f0;
  margin-bottom: 24rpx;
}

.stats-item {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.stats-number {
  font-size: 32rpx;
  font-weight: 700;
  color: #1a1a1a;
  margin-bottom: 8rpx;
}

.stats-label {
  font-size: 24rpx;
  color: #999;
}

/* 操作按钮 */
.action-section {
  padding-top: 24rpx;
}

.action-buttons {
  display: flex;
  justify-content: space-around;
  align-items: center;
}

.action-btn {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 16rpx 24rpx;
  border-radius: 20rpx;
  transition: all 0.3s ease;
}

.action-btn:active {
  background: #f8f9fa;
  transform: scale(0.95);
}

.action-btn.active {
  background: #fff0f0;
}

.action-icon {
  font-size: 36rpx;
  margin-bottom: 8rpx;
}

.action-text {
  font-size: 24rpx;
  color: #666;
}

.action-btn.active .action-text {
  color: #ff4757;
}

/* 评论区域 */
.comments-section {
  background: white;
  border-radius: 20rpx;
  margin: 0 24rpx;
}

/* 空评论状态 */
.empty-comments {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 120rpx 0;
  text-align: center;
}

.empty-icon {
  font-size: 120rpx;
  margin-bottom: 32rpx;
  opacity: 0.5;
}

.empty-text {
  font-size: 32rpx;
  color: #666;
  margin-bottom: 16rpx;
}

.empty-desc {
  font-size: 28rpx;
  color: #999;
}

/* 评论输入框 */
.comment-input-section {
  position: fixed;
  bottom: -100%;
  left: 0;
  right: 0;
  background: white;
  border-top: 1rpx solid #f0f0f0;
  transition: all 0.3s ease;
  z-index: 1000;
}

.comment-input-section.show {
  bottom: 0;
}

.comment-input-container {
  padding: 24rpx 32rpx;
  padding-bottom: calc(24rpx + env(safe-area-inset-bottom));
}

.input-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20rpx;
}

.reply-text {
  font-size: 26rpx;
  color: #007AFF;
  font-weight: 500;
}

.cancel-reply {
  padding: 12rpx 20rpx;
  background: #f8f9fa;
  border-radius: 16rpx;
  transition: all 0.3s ease;
}

.cancel-reply:active {
  background: #e9ecef;
}

.cancel-text {
  font-size: 24rpx;
  color: #666;
}

.input-content {
  display: flex;
  align-items: flex-end;
  gap: 20rpx;
}

.comment-textarea {
  flex: 1;
  min-height: 80rpx;
  max-height: 200rpx;
  background: #f8f9fa;
  border-radius: 20rpx;
  padding: 20rpx 24rpx;
  font-size: 28rpx;
  line-height: 1.4;
}

.submit-btn {
  padding: 20rpx 32rpx;
  background: #f8f9fa;
  border-radius: 20rpx;
  transition: all 0.3s ease;
}

.submit-btn.active {
  background: #007AFF;
}

.submit-btn:active {
  transform: scale(0.95);
}

.submit-text {
  font-size: 28rpx;
  color: #999;
  font-weight: 600;
}

.submit-btn.active .submit-text {
  color: white;
}

/* 底部操作栏 */
.bottom-actions {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: white;
  border-top: 1rpx solid #f0f0f0;
  padding: 24rpx 32rpx;
  padding-bottom: calc(24rpx + env(safe-area-inset-bottom));
  display: flex;
  align-items: center;
  gap: 20rpx;
  z-index: 100;
}

.action-input {
  flex: 1;
  background: #f8f9fa;
  border-radius: 30rpx;
  padding: 20rpx 24rpx;
}

.input-placeholder {
  font-size: 28rpx;
  color: #999;
}

.action-buttons {
  display: flex;
  align-items: center;
  gap: 16rpx;
}

.action-btn {
  display: flex;
  align-items: center;
  padding: 16rpx;
  border-radius: 20rpx;
  transition: all 0.3s ease;
}

.action-btn:active {
  background: #f8f9fa;
  transform: scale(0.95);
}

.action-btn.active {
  background: #fff0f0;
}

.action-icon {
  font-size: 32rpx;
  margin-right: 8rpx;
}

.action-count {
  font-size: 24rpx;
  color: #666;
}

.action-btn.active .action-count {
  color: #ff4757;
}

/* 分享菜单 */
.share-menu {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 2000;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.share-menu.show {
  opacity: 1;
  visibility: visible;
}

.menu-mask {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
}

.menu-content {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: white;
  border-radius: 40rpx 40rpx 0 0;
  padding: 48rpx 32rpx;
  transform: translateY(100%);
  transition: all 0.3s ease;
}

.share-menu.show .menu-content {
  transform: translateY(0);
}

.menu-header {
  text-align: center;
  margin-bottom: 40rpx;
}

.menu-title {
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
}

.menu-options {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 40rpx;
  margin-bottom: 48rpx;
}

.menu-option {
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: all 0.3s ease;
}

.menu-option:active {
  transform: scale(0.95);
}

.option-icon {
  font-size: 60rpx;
  margin-bottom: 16rpx;
}

.option-text {
  font-size: 24rpx;
  color: #666;
}

.menu-cancel {
  background: #f8f9fa;
  border-radius: 20rpx;
  padding: 24rpx;
  text-align: center;
  transition: all 0.3s ease;
}

.menu-cancel:active {
  background: #e9ecef;
}

.cancel-text {
  font-size: 32rpx;
  color: #1a1a1a;
  font-weight: 600;
}

/* 加载状态 */
.loading-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 200rpx 0;
}

.loading-spinner {
  width: 60rpx;
  height: 60rpx;
  border: 4rpx solid #f0f0f0;
  border-top: 4rpx solid #007AFF;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 24rpx;
}

.loading-text {
  font-size: 28rpx;
  color: #999;
}

/* 没有更多 */
.no-more {
  text-align: center;
  padding: 60rpx 0;
}

.no-more-text {
  font-size: 28rpx;
  color: #999;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

===== miniprogram\pages\posts\index.js =====

const app = getApp();
const FormatTime = require('../../utils/formatTime.js');

Page({
  data: {
    customNavHeight: 0,
    posts: [],
    loading: false,
    hasMore: true,
    page: 1,
    pageSize: 10,
    refreshing: false,
    categories: [
      { id: 'all', name: '全部', active: true },
      { id: 'hot', name: '热门', active: false },
      { id: 'follow', name: '关注', active: false },
      { id: 'recommend', name: '推荐', active: false }
    ],
    activeCategory: 'all'
  },

  onLoad(options) {
    this.setData({
      customNavHeight: app.globalData.customNavHeight
    });
  
    // 改进的登录检查
    this.checkUserStatus();
  },
  
  // 改进的用户状态检查
  checkUserStatus() {
    console.log('检查用户状态:', app.globalData.isLoggedIn);
    
    if (!app.globalData.isLoggedIn) {
      console.log('用户未登录，跳转到登录页');
      // 使用延时确保页面加载完成
      setTimeout(() => {
        wx.redirectTo({
          url: '/pages/auth/index'
        });
      }, 100);
      return;
    }
    
    // 用户已登录，加载帖子
    this.loadPosts(true);
  },

  onShow() {
    // 刷新用户状态
    this.checkUserStatus();
  },

  onPullDownRefresh() {
    this.refreshPosts();
  },

  onReachBottom() {
    this.loadMorePosts();
  },

  // 检查用户状态
  checkUserStatus() {
    if (!app.globalData.isLoggedIn) {
      // 未登录，跳转到登录页
      wx.redirectTo({
        url: '/pages/auth/index'
      });
      return;
    }
  },

  // 加载帖子
  async loadPosts(showLoading = false) {
    if (this.data.loading) return;

    this.setData({ loading: true });

    if (showLoading) {
      app.showLoading('加载中...');
    }

    try {
      const result = await wx.cloud.callFunction({
        name: 'post',
        data: {
          action: 'getPosts',
          category: this.data.activeCategory,
          page: this.data.page,
          pageSize: this.data.pageSize
        }
      });

      if (result.result && result.result.success) {
        const { posts, hasMore } = result.result.data;
        
        const formattedPosts = posts.map(post => ({
          ...post,
          createTime: FormatTime.friendlyTime(post.createTime),
          isLiked: post.likes && post.likes.includes(app.globalData.userInfo._id)
        }));

        this.setData({
          posts: this.data.page === 1 ? formattedPosts : [...this.data.posts, ...formattedPosts],
          hasMore: hasMore
        });

        if (showLoading) {
          wx.hideLoading();
        }
      } else {
        throw new Error(result.result.message || '加载失败');
      }
    } catch (error) {
      console.error('加载帖子失败:', error);
      app.showError('加载失败，请重试');
      
      if (showLoading) {
        wx.hideLoading();
      }
    } finally {
      this.setData({ 
        loading: false,
        refreshing: false
      });
      wx.stopPullDownRefresh();
    }
  },

  // 刷新帖子
  refreshPosts() {
    this.setData({
      page: 1,
      refreshing: true
    });
    this.loadPosts();
  },

  // 加载更多帖子
  loadMorePosts() {
    if (!this.data.hasMore || this.data.loading) return;

    this.setData({
      page: this.data.page + 1
    });
    this.loadPosts();
  },

  // 切换分类
  onCategoryTap(e) {
    const { category } = e.currentTarget.dataset;
    
    if (category === this.data.activeCategory) return;

    // 更新分类状态
    const categories = this.data.categories.map(item => ({
      ...item,
      active: item.id === category
    }));

    this.setData({
      categories,
      activeCategory: category,
      page: 1
    });

    this.loadPosts(true);
  },

  // 点赞帖子
  async onLikePost(e) {
    const { postid, liked } = e.detail;
    
    try {
      const result = await wx.cloud.callFunction({
        name: 'post',
        data: {
          action: 'likePost',
          postId: postid,
          isLiked: liked
        }
      });

      if (!result.result.success) {
        // 回退状态
        this.rollbackLikeStatus(postid, liked);
        app.showError('操作失败');
      }
    } catch (error) {
      console.error('点赞失败:', error);
      this.rollbackLikeStatus(postid, liked);
      app.showError('操作失败');
    }
  },

  // 回退点赞状态
  rollbackLikeStatus(postId, isLiked) {
    const posts = this.data.posts.map(post => {
      if (post._id === postId) {
        return {
          ...post,
          isLiked: !isLiked,
          likeCount: isLiked ? post.likeCount - 1 : post.likeCount + 1
        };
      }
      return post;
    });

    this.setData({ posts });
  },

  // 评论帖子
  onCommentPost(e) {
    const { postid } = e.detail;
    wx.navigateTo({
      url: `/pages/post-detail/index?id=${postid}`
    });
  },

  // 分享帖子
  onSharePost(e) {
    const { postid } = e.detail;
    // 可以在这里实现分享逻辑
    app.showSuccess('已生成分享卡片');
  },

  // 点击用户头像
  onAvatarTap(e) {
    const { userid } = e.detail;
    wx.navigateTo({
      url: `/pages/profile/other?id=${userid}`
    });
  },

  // 发布帖子
  onPublishTap() {
    wx.navigateTo({
      url: '/pages/publish/index'
    });
  },

  // 搜索
  onSearchTap() {
    wx.navigateTo({
      url: '/pages/search/index'
    });
  }
});

===== miniprogram\pages\posts\index.json =====

{
  "navigationStyle": "custom",
  "backgroundColor": "#F8F9FA",
  "backgroundTextStyle": "dark",
  "enablePullDownRefresh": true,
  "usingComponents": {
    "post-card": "/components/post-card/post-card"
  }
}

===== miniprogram\pages\posts\index.wxml =====

<view class="posts-page">
  <!-- 自定义导航栏 -->
  <view class="custom-nav" style="height: {{customNavHeight}}px">
    <view class="nav-content" style="height: 44px; padding-top: {{statusBarHeight}}px">
      <text class="nav-title">发现</text>
      <view class="nav-actions">
        <view class="nav-btn" bind:tap="onSearchTap">
          <text class="btn-icon">🔍</text>
        </view>
        <view class="nav-btn" bind:tap="onPublishTap">
          <text class="btn-icon">✏️</text>
        </view>
      </view>
    </view>
  </view>

  <view class="posts-container" style="padding-top: {{customNavHeight}}px">
    <!-- 分类导航 -->
    <view class="categories-nav">
      <scroll-view class="categories-scroll" scroll-x>
        <view class="categories-list">
          <block wx:for="{{categories}}" wx:key="id">
            <view 
              class="category-item {{item.active ? 'active' : ''}}"
              data-category="{{item.id}}"
              bind:tap="onCategoryTap"
            >
              <text class="category-name">{{item.name}}</text>
              <view class="category-indicator"></view>
            </view>
          </block>
        </view>
      </scroll-view>
    </view>

    <!-- 帖子列表 -->
    <view class="posts-list">
      <block wx:for="{{posts}}" wx:key="_id">
        <post-card 
          postData="{{item}}"
          bind:like="onLikePost"
          bind:comment="onCommentPost"
          bind:share="onSharePost"
          bind:avatarTap="onAvatarTap"
        />
      </block>
    </view>

    <!-- 加载状态 -->
    <view class="loading-state" wx:if="{{loading && !refreshing}}">
      <view class="loading-spinner"></view>
      <text class="loading-text">加载中...</text>
    </view>

    <!-- 没有更多 -->
    <view class="no-more" wx:if="{{!hasMore && posts.length > 0}}">
      <text class="no-more-text">已经到底啦～</text>
    </view>

    <!-- 空状态 -->
    <view class="empty-state" wx:if="{{!loading && posts.length === 0}}">
      <text class="empty-icon">📝</text>
      <text class="empty-text">暂无帖子</text>
      <text class="empty-desc">快来发布第一条帖子吧</text>
      <button class="btn btn-primary" bind:tap="onPublishTap">
        发布帖子
      </button>
    </view>
  </view>

  <!-- 浮动发布按钮 -->
  <view class="floating-action-btn" bind:tap="onPublishTap">
    <text class="fab-icon">+</text>
  </view>
</view>

===== miniprogram\pages\posts\index.wxss =====

.posts-page {
  min-height: 100vh;
  background: #F8F9FA;
}

.posts-container {
  min-height: 100vh;
}

/* 自定义导航栏 */
.custom-nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20rpx);
  border-bottom: 1rpx solid rgba(0, 0, 0, 0.1);
}

.nav-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 32rpx;
}

.nav-title {
  font-size: 36rpx;
  font-weight: 700;
  color: #1a1a1a;
}

.nav-actions {
  display: flex;
  align-items: center;
  gap: 24rpx;
}

.nav-btn {
  width: 64rpx;
  height: 64rpx;
  border-radius: 50%;
  background: #f8f9fa;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.nav-btn:active {
  background: #e9ecef;
  transform: scale(0.95);
}

.btn-icon {
  font-size: 32rpx;
}

/* 分类导航 */
.categories-nav {
  background: white;
  border-bottom: 1rpx solid #f0f0f0;
  position: sticky;
  top: 0;
  z-index: 100;
}

.categories-scroll {
  white-space: nowrap;
}

.categories-list {
  display: inline-flex;
  padding: 0 32rpx;
}

.category-item {
  padding: 24rpx 32rpx;
  position: relative;
  transition: all 0.3s ease;
}

.category-item.active .category-name {
  color: #007AFF;
  font-weight: 600;
}

.category-name {
  font-size: 30rpx;
  color: #666;
  transition: all 0.3s ease;
}

.category-indicator {
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 0;
  height: 4rpx;
  background: #007AFF;
  border-radius: 2rpx;
  transition: all 0.3s ease;
}

.category-item.active .category-indicator {
  width: 40rpx;
}

/* 帖子列表 */
.posts-list {
  padding-bottom: 120rpx;
}

/* 加载状态 */
.loading-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 80rpx 0;
}

.loading-spinner {
  width: 48rpx;
  height: 48rpx;
  border: 4rpx solid #f0f0f0;
  border-top: 4rpx solid #007AFF;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 24rpx;
}

.loading-text {
  font-size: 28rpx;
  color: #999;
}

/* 没有更多 */
.no-more {
  text-align: center;
  padding: 60rpx 0;
}

.no-more-text {
  font-size: 28rpx;
  color: #999;
}

/* 空状态 */
.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 200rpx 0;
  text-align: center;
}

.empty-icon {
  font-size: 120rpx;
  margin-bottom: 32rpx;
  opacity: 0.5;
}

.empty-text {
  font-size: 32rpx;
  color: #666;
  margin-bottom: 16rpx;
}

.empty-desc {
  font-size: 28rpx;
  color: #999;
  margin-bottom: 48rpx;
}

/* 浮动发布按钮 */
.floating-action-btn {
  position: fixed;
  right: 32rpx;
  bottom: 120rpx;
  width: 120rpx;
  height: 120rpx;
  background: linear-gradient(135deg, #007AFF 0%, #5856D6 100%);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 12rpx 40rpx rgba(0, 122, 255, 0.3);
  transition: all 0.3s ease;
  z-index: 100;
}

.floating-action-btn:active {
  transform: scale(0.95);
  box-shadow: 0 8rpx 30rpx rgba(0, 122, 255, 0.4);
}

.fab-icon {
  font-size: 48rpx;
  color: white;
  font-weight: 300;
}

/* 按钮样式 */
.btn {
  width: 300rpx;
  height: 80rpx;
  border: none;
  border-radius: 40rpx;
  font-size: 28rpx;
  font-weight: 600;
}

.btn-primary {
  background: linear-gradient(135deg, #007AFF 0%, #5856D6 100%);
  color: white;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

===== miniprogram\pages\profile\index.js =====

const app = getApp();
const FormatTime = require('../../utils/formatTime.js');

Page({
  data: {
    customNavHeight: 0,
    userInfo: null,
    stats: {
      posts: 0,
      likes: 0,
      followers: 0,
      following: 0
    },
    menus: [
      {
        id: 'myPosts',
        name: '我的帖子',
        icon: '📝',
        color: '#007AFF'
      },
      {
        id: 'myComments',
        name: '我的评论',
        icon: '💬',
        color: '#34C759'
      },
      {
        id: 'myLikes',
        name: '我的点赞',
        icon: '❤️',
        color: '#FF3B30'
      },
      {
        id: 'myOrders',
        name: '我的订单',
        icon: '📦',
        color: '#5856D6'
      },
      {
        id: 'settings',
        name: '设置',
        icon: '⚙️',
        color: '#8E8E93'
      },
      {
        id: 'about',
        name: '关于我们',
        icon: 'ℹ️',
        color: '#FF9500'
      }
    ],
    level: 1,
    exp: 0,
    nextLevelExp: 100,
    progress: 0
  },

  onLoad(options) {
    this.setData({
      customNavHeight: app.globalData.customNavHeight
    });
  },

  onShow() {
    this.loadUserData();
  },

  onPullDownRefresh() {
    this.loadUserData();
  },

  // 加载用户数据
  async loadUserData() {
    if (!app.globalData.isLoggedIn) {
      wx.redirectTo({
        url: '/pages/auth/index'
      });
      return;
    }

    app.showLoading('加载中...');

    try {
      const result = await wx.cloud.callFunction({
        name: 'user',
        data: {
          action: 'getProfile'
        }
      });

      if (result.result && result.result.success) {
        const { userInfo, stats, levelInfo } = result.result.data;
        
        this.setData({
          userInfo: userInfo,
          stats: stats,
          level: levelInfo.level,
          exp: levelInfo.exp,
          nextLevelExp: levelInfo.nextLevelExp,
          progress: Math.min((levelInfo.exp / levelInfo.nextLevelExp) * 100, 100)
        });

        wx.setStorageSync('userInfo', userInfo);
        app.globalData.userInfo = userInfo;
      } else {
        throw new Error(result.result.message || '加载失败');
      }
    } catch (error) {
      console.error('加载用户数据失败:', error);
      app.showError('加载失败，请重试');
    } finally {
      wx.hideLoading();
      wx.stopPullDownRefresh();
    }
  },

  // 点击菜单项
  onMenuTap(e) {
    const { id } = e.currentTarget.dataset;
    
    switch (id) {
      case 'myPosts':
        wx.navigateTo({
          url: '/pages/profile/posts'
        });
        break;
      case 'myComments':
        wx.navigateTo({
          url: '/pages/profile/comments'
        });
        break;
      case 'myLikes':
        wx.navigateTo({
          url: '/pages/profile/likes'
        });
        break;
      case 'myOrders':
        wx.navigateTo({
          url: '/pages/orders/index'
        });
        break;
      case 'settings':
        wx.navigateTo({
          url: '/pages/settings/index'
        });
        break;
      case 'about':
        wx.navigateTo({
          url: '/pages/about/index'
        });
        break;
    }
  },

  // 编辑资料
  onEditProfile() {
    wx.navigateTo({
      url: '/pages/profile/edit'
    });
  },

  // 点击头像
  onAvatarTap() {
    wx.chooseImage({
      count: 1,
      sizeType: ['compressed'],
      sourceType: ['album', 'camera'],
      success: (res) => {
        this.uploadAvatar(res.tempFilePaths[0]);
      }
    });
  },

  // 上传头像
  async uploadAvatar(tempFilePath) {
    app.showLoading('上传中...');

    try {
      // 上传到云存储
      const uploadResult = await wx.cloud.uploadFile({
        cloudPath: `avatars/${Date.now()}-${Math.random().toString(36).substr(2)}.jpg`,
        filePath: tempFilePath
      });

      // 更新用户头像
      const result = await wx.cloud.callFunction({
        name: 'user',
        data: {
          action: 'updateAvatar',
          avatarUrl: uploadResult.fileID
        }
      });

      if (result.result && result.result.success) {
        // 更新本地数据
        const userInfo = { ...this.data.userInfo, avatarUrl: uploadResult.fileID };
        this.setData({ userInfo });
        wx.setStorageSync('userInfo', userInfo);
        app.globalData.userInfo = userInfo;

        app.showSuccess('头像更新成功');
      } else {
        throw new Error(result.result.message || '更新失败');
      }
    } catch (error) {
      console.error('上传头像失败:', error);
      app.showError('上传失败，请重试');
    } finally {
      wx.hideLoading();
    }
  },

  // 退出登录
  onLogout() {
    wx.showModal({
      title: '确认退出',
      content: '确定要退出登录吗？',
      success: (res) => {
        if (res.confirm) {
          this.logout();
        }
      }
    });
  },

  logout() {
    // 清除本地存储
    wx.removeStorageSync('token');
    wx.removeStorageSync('userInfo');
    
    // 更新全局状态
    app.globalData.isLoggedIn = false;
    app.globalData.userInfo = null;

    // 跳转到登录页
    wx.redirectTo({
      url: '/pages/auth/index'
    });

    app.showSuccess('已退出登录');
  }
});

===== miniprogram\pages\profile\index.json =====

{
  "navigationStyle": "custom",
  "backgroundColor": "#F8F9FA",
  "backgroundTextStyle": "dark",
  "enablePullDownRefresh": true,
  "usingComponents": {
    "level-progress": "/components/level-progress/level-progress"
  }
}

===== miniprogram\pages\profile\index.wxml =====

<view class="profile-page">
  <!-- 自定义导航栏 -->
  <view class="custom-nav" style="height: {{customNavHeight}}px">
    <view class="nav-content" style="height: 44px; padding-top: {{statusBarHeight}}px">
      <text class="nav-title">个人中心</text>
    </view>
  </view>

  <view class="profile-container" style="padding-top: {{customNavHeight}}px">
    <!-- 用户信息卡片 -->
    <view class="user-card">
      <view class="user-header">
        <view class="avatar-section">
          <image 
            class="user-avatar" 
            src="{{userInfo.avatarUrl || '/images/default-avatar.png'}}"
            bind:tap="onAvatarTap"
          />
          <view class="user-basic">
            <text class="user-name">{{userInfo.nickName || '未设置昵称'}}</text>
            <text class="user-bio">{{userInfo.bio || '这个人很懒，什么都没写'}}</text>
          </view>
        </view>
        <view class="edit-btn" bind:tap="onEditProfile">
          <text class="edit-text">编辑资料</text>
        </view>
      </view>

      <!-- 等级进度 -->
      <view class="level-section">
        <level-progress
          currentExp="{{exp}}"
          nextLevelExp="{{nextLevelExp}}"
          currentLevel="{{level}}"
          nextLevel="{{level + 1}}"
          showInfo="{{true}}"
        />
      </view>

      <!-- 数据统计 -->
      <view class="stats-section">
        <view class="stat-item" bind:tap="onMenuTap" data-id="myPosts">
          <text class="stat-number">{{stats.posts}}</text>
          <text class="stat-label">帖子</text>
        </view>
        <view class="stat-item" bind:tap="onMenuTap" data-id="myLikes">
          <text class="stat-number">{{stats.likes}}</text>
          <text class="stat-label">获赞</text>
        </view>
        <view class="stat-item" bind:tap="onMenuTap" data-id="followers">
          <text class="stat-number">{{stats.followers}}</text>
          <text class="stat-label">粉丝</text>
        </view>
        <view class="stat-item" bind:tap="onMenuTap" data-id="following">
          <text class="stat-number">{{stats.following}}</text>
          <text class="stat-label">关注</text>
        </view>
      </view>
    </view>

    <!-- 功能菜单 -->
    <view class="menu-section">
      <view class="menu-grid">
        <block wx:for="{{menus}}" wx:key="id">
          <view class="menu-item" data-id="{{item.id}}" bind:tap="onMenuTap">
            <view class="menu-icon" style="color: {{item.color}}">
              {{item.icon}}
            </view>
            <text class="menu-name">{{item.name}}</text>
          </view>
        </block>
      </view>
    </view>

    <!-- 退出登录 -->
    <view class="logout-section">
      <button class="logout-btn" bind:tap="onLogout">退出登录</button>
    </view>
  </view>
</view>

===== miniprogram\pages\profile\index.wxss =====

.profile-page {
  min-height: 100vh;
  background: #F8F9FA;
}

.profile-container {
  min-height: 100vh;
}

/* 自定义导航栏 */
.custom-nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20rpx);
  border-bottom: 1rpx solid rgba(0, 0, 0, 0.1);
}

.nav-content {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 32rpx;
}

.nav-title {
  font-size: 36rpx;
  font-weight: 700;
  color: #1a1a1a;
}

/* 用户卡片 */
.user-card {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 0 0 40rpx 40rpx;
  padding: 48rpx 32rpx 32rpx;
  color: white;
  margin-bottom: 24rpx;
}

.user-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 40rpx;
}

.avatar-section {
  display: flex;
  align-items: center;
  flex: 1;
}

.user-avatar {
  width: 120rpx;
  height: 120rpx;
  border-radius: 50%;
  border: 4rpx solid rgba(255, 255, 255, 0.3);
  margin-right: 24rpx;
}

.user-basic {
  flex: 1;
}

.user-name {
  display: block;
  font-size: 40rpx;
  font-weight: 700;
  margin-bottom: 12rpx;
}

.user-bio {
  display: block;
  font-size: 26rpx;
  opacity: 0.9;
}

.edit-btn {
  background: rgba(255, 255, 255, 0.2);
  padding: 16rpx 24rpx;
  border-radius: 20rpx;
  backdrop-filter: blur(10rpx);
  transition: all 0.3s ease;
}

.edit-btn:active {
  background: rgba(255, 255, 255, 0.3);
  transform: scale(0.95);
}

.edit-text {
  font-size: 24rpx;
  font-weight: 500;
}

/* 等级区域 */
.level-section {
  margin-bottom: 40rpx;
}

/* 数据统计 */
.stats-section {
  display: flex;
  justify-content: space-around;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10rpx);
  border-radius: 20rpx;
  padding: 32rpx 0;
}

.stat-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: all 0.3s ease;
}

.stat-item:active {
  transform: scale(0.95);
}

.stat-number {
  font-size: 36rpx;
  font-weight: 700;
  margin-bottom: 8rpx;
}

.stat-label {
  font-size: 24rpx;
  opacity: 0.9;
}

/* 功能菜单 */
.menu-section {
  background: white;
  margin: 0 24rpx 24rpx;
  border-radius: 24rpx;
  padding: 32rpx;
  box-shadow: 0 8rpx 40rpx rgba(0, 0, 0, 0.06);
}

.menu-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 32rpx;
}

.menu-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 32rpx 16rpx;
  border-radius: 20rpx;
  transition: all 0.3s ease;
  background: #f8f9fa;
}

.menu-item:active {
  transform: scale(0.95);
  background: #e9ecef;
}

.menu-icon {
  font-size: 64rpx;
  margin-bottom: 16rpx;
}

.menu-name {
  font-size: 26rpx;
  color: #333;
  font-weight: 500;
}

/* 退出登录 */
.logout-section {
  padding: 0 24rpx 40rpx;
}

.logout-btn {
  width: 100%;
  height: 96rpx;
  background: white;
  color: #FF3B30;
  border: none;
  border-radius: 24rpx;
  font-size: 32rpx;
  font-weight: 600;
  box-shadow: 0 8rpx 40rpx rgba(0, 0, 0, 0.06);
  transition: all 0.3s ease;
}

.logout-btn:active {
  transform: scale(0.98);
  background: #fff5f5;
}

===== miniprogram\pages\publish\index.js =====

const app = getApp();

Page({
  data: {
    customNavHeight: 0,
    content: '',
    images: [],
    maxImages: 9,
    tag: '',
    tags: [
      { id: 'share', name: '分享', color: '#007AFF' },
      { id: 'question', name: '提问', color: '#34C759' },
      { id: 'discuss', name: '讨论', color: '#FF9500' },
      { id: 'news', name: '资讯', color: '#FF3B30' }
    ],
    selectedTag: 'share',
    location: '',
    isAnonymous: false,
    publishing: false,
    wordCount: 0,
    maxWords: 1000
  },

  onLoad(options) {
    this.setData({
      customNavHeight: app.globalData.customNavHeight
    });
  },

  onShow() {
    // 检查登录状态
    if (!app.globalData.isLoggedIn) {
      wx.redirectTo({
        url: '/pages/auth/index'
      });
      return;
    }
  },

  // 输入内容
  onContentInput(e) {
    const content = e.detail.value;
    this.setData({
      content: content,
      wordCount: content.length
    });
  },

  // 选择图片
  onChooseImage() {
    const { images, maxImages } = this.data;
    const count = maxImages - images.length;

    if (count <= 0) {
      app.showError(`最多只能选择${maxImages}张图片`);
      return;
    }

    wx.chooseImage({
      count: count,
      sizeType: ['compressed'],
      sourceType: ['album', 'camera'],
      success: (res) => {
        this.setData({
          images: [...this.data.images, ...res.tempFilePaths]
        });
      }
    });
  },

  // 预览图片
  onPreviewImage(e) {
    const { index } = e.currentTarget.dataset;
    wx.previewImage({
      current: this.data.images[index],
      urls: this.data.images
    });
  },

  // 删除图片
  onDeleteImage(e) {
    const { index } = e.currentTarget.dataset;
    const images = [...this.data.images];
    images.splice(index, 1);
    this.setData({ images });
  },

  // 选择标签
  onTagTap(e) {
    const { tag } = e.currentTarget.dataset;
    this.setData({ selectedTag: tag });
  },

  // 切换匿名
  onAnonymousChange(e) {
    this.setData({
      isAnonymous: e.detail.value.length > 0
    });
  },

  // 选择位置
  onChooseLocation() {
    wx.chooseLocation({
      success: (res) => {
        this.setData({
          location: res.name
        });
      },
      fail: (error) => {
        console.error('选择位置失败:', error);
      }
    });
  },

  // 清除位置
  onClearLocation() {
    this.setData({ location: '' });
  },

  // 发布帖子
  async onPublish() {
    const { content, images, selectedTag, location, isAnonymous, publishing } = this.data;

    if (publishing) return;

    // 验证内容
    if (!content.trim()) {
      app.showError('请输入帖子内容');
      return;
    }

    if (content.length > this.data.maxWords) {
      app.showError(`内容不能超过${this.data.maxWords}字`);
      return;
    }

    this.setData({ publishing: true });
    app.showLoading('发布中...');

    try {
      // 上传图片
      let imageUrls = [];
      if (images.length > 0) {
        imageUrls = await this.uploadImages(images);
      }

      // 发布帖子
      const result = await wx.cloud.callFunction({
        name: 'post',
        data: {
          action: 'create',
          content: content.trim(),
          images: imageUrls,
          tag: selectedTag,
          location: location,
          isAnonymous: isAnonymous
        }
      });

      if (result.result && result.result.success) {
        app.showSuccess('发布成功');
        
        // 延迟跳转
        setTimeout(() => {
          wx.navigateBack();
        }, 1500);
      } else {
        throw new Error(result.result.message || '发布失败');
      }
    } catch (error) {
      console.error('发布失败:', error);
      app.showError('发布失败，请重试');
    } finally {
      this.setData({ publishing: false });
      wx.hideLoading();
    }
  },

  // 上传图片
  async uploadImages(images) {
    const uploadTasks = images.map((imagePath, index) => {
      return new Promise((resolve, reject) => {
        const cloudPath = `posts/${Date.now()}-${Math.random().toString(36).substr(2)}-${index}.jpg`;
        
        wx.cloud.uploadFile({
          cloudPath: cloudPath,
          filePath: imagePath,
          success: (res) => {
            resolve(res.fileID);
          },
          fail: (error) => {
            reject(error);
          }
        });
      });
    });

    return await Promise.all(uploadTasks);
  },

  // 取消发布
  onCancel() {
    const { content, images } = this.data;
    
    if (content.trim() || images.length > 0) {
      wx.showModal({
        title: '确认取消',
        content: '确定要取消发布吗？已编辑的内容将丢失',
        success: (res) => {
          if (res.confirm) {
            wx.navigateBack();
          }
        }
      });
    } else {
      wx.navigateBack();
    }
  },

  // 格式化标签名称
  getTagName(tagId) {
    const tag = this.data.tags.find(t => t.id === tagId);
    return tag ? tag.name : '分享';
  }
});

===== miniprogram\pages\publish\index.json =====

{
  "navigationStyle": "custom",
  "backgroundColor": "#FFFFFF",
  "backgroundTextStyle": "dark",
  "enablePullDownRefresh": false,
  "usingComponents": {}
}

===== miniprogram\pages\publish\index.wxml =====

<view class="publish-page">
  <!-- 自定义导航栏 -->
  <view class="custom-nav" style="height: {{customNavHeight}}px">
    <view class="nav-content" style="height: 44px; padding-top: {{statusBarHeight}}px">
      <view class="nav-back" bind:tap="onCancel">
        <text class="back-icon">‹</text>
        <text class="back-text">取消</text>
      </view>
      <text class="nav-title">发布帖子</text>
      <view class="nav-actions">
        <view 
          class="publish-btn {{publishing ? 'disabled' : ''}} {{content && content.trim() ? 'active' : ''}}"
          bind:tap="onPublish"
        >
          <text class="publish-text">{{publishing ? '发布中...' : '发布'}}</text>
        </view>
      </view>
    </view>
  </view>

  <view class="publish-container" style="padding-top: {{customNavHeight}}px">
    <!-- 内容输入 -->
    <view class="content-section">
      <textarea 
        class="content-input" 
        placeholder="分享你的想法、经验或问题..."
        value="{{content}}"
        bindinput="onContentInput"
        maxlength="{{maxWords}}"
        show-confirm-bar="{{false}}"
        auto-focus
      />
      <view class="word-count">
        <text class="count-text {{wordCount > maxWords * 0.8 ? 'warning' : ''}}">
          {{wordCount}}/{{maxWords}}
        </text>
      </view>
    </view>

    <!-- 图片上传 -->
    <view class="images-section" wx:if="{{images.length > 0}}">
      <view class="images-grid">
        <block wx:for="{{images}}" wx:key="*this" wx:for-index="index">
          <view class="image-item">
            <image 
              class="image" 
              src="{{item}}" 
              mode="aspectFill"
              data-index="{{index}}"
              bind:tap="onPreviewImage"
            />
            <view 
              class="delete-btn" 
              data-index="{{index}}"
              bind:tap="onDeleteImage"
            >
              <text class="delete-icon">×</text>
            </view>
          </view>
        </block>
        
        <view 
          class="add-image-btn" 
          wx:if="{{images.length < maxImages}}"
          bind:tap="onChooseImage"
        >
          <text class="add-icon">+</text>
          <text class="add-text">添加图片</text>
        </view>
      </view>
    </view>

    <!-- 功能选项 -->
    <view class="options-section">
      <!-- 标签选择 -->
      <view class="option-item">
        <view class="option-label">
          <text class="label-text">标签</text>
        </view>
        <view class="tags-list">
          <block wx:for="{{tags}}" wx:key="id">
            <view 
              class="tag-item {{selectedTag === item.id ? 'active' : ''}}"
              style="{{selectedTag === item.id ? 'background-color: ' + item.color + '; border-color: ' + item.color : ''}}"
              data-tag="{{item.id}}"
              bind:tap="onTagTap"
            >
              <text class="tag-text">{{item.name}}</text>
            </view>
          </block>
        </view>
      </view>

      <!-- 位置选择 -->
      <view class="option-item">
        <view class="option-label">
          <text class="label-text">位置</text>
        </view>
        <view class="location-content">
          <view 
            class="location-btn {{location ? 'has-location' : ''}}"
            bind:tap="onChooseLocation"
          >
            <text class="location-icon">📍</text>
            <text class="location-text">
              {{location || '添加位置'}}
            </text>
            <view 
              class="clear-location {{location ? 'show' : ''}}"
              bind:tap="onClearLocation"
            >
              <text class="clear-icon">×</text>
            </view>
          </view>
        </view>
      </view>

      <!-- 匿名发布 -->
      <view class="option-item">
        <view class="option-label">
          <text class="label-text">匿名发布</text>
          <text class="label-desc">隐藏你的个人信息</text>
        </view>
        <view class="switch-content">
          <switch 
            checked="{{isAnonymous}}" 
            bindchange="onAnonymousChange"
            color="#007AFF"
          />
        </view>
      </view>
    </view>

    <!-- 底部操作栏 -->
    <view class="bottom-actions" wx:if="{{images.length === 0}}">
      <view class="action-buttons">
        <view class="action-btn" bind:tap="onChooseImage">
          <text class="action-icon">🖼️</text>
          <text class="action-text">图片</text>
        </view>
        <view class="action-btn" bind:tap="onChooseLocation">
          <text class="action-icon">📍</text>
          <text class="action-text">位置</text>
        </view>
        <view class="action-btn" bind:tap="onTagTap" data-tag="question">
          <text class="action-icon">❓</text>
          <text class="action-text">提问</text>
        </view>
      </view>
    </view>
  </view>

  <!-- 发布加载遮罩 -->
  <view class="publish-mask" wx:if="{{publishing}}">
    <view class="publish-loading">
      <view class="loading-spinner"></view>
      <text class="loading-text">发布中...</text>
    </view>
  </view>
</view>

===== miniprogram\pages\publish\index.wxss =====

.publish-page {
  min-height: 100vh;
  background: #FFFFFF;
}

.publish-container {
  min-height: 100vh;
  padding-bottom: 120rpx;
}

/* 自定义导航栏 */
.custom-nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20rpx);
  border-bottom: 1rpx solid rgba(0, 0, 0, 0.1);
}

.nav-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 32rpx;
}

.nav-back {
  display: flex;
  align-items: center;
  padding: 16rpx 0;
  transition: all 0.3s ease;
}

.nav-back:active {
  opacity: 0.6;
}

.back-icon {
  font-size: 40rpx;
  color: #1a1a1a;
  font-weight: 300;
  margin-right: 8rpx;
}

.back-text {
  font-size: 32rpx;
  color: #1a1a1a;
}

.nav-title {
  font-size: 36rpx;
  font-weight: 700;
  color: #1a1a1a;
}

.nav-actions {
  display: flex;
  align-items: center;
}

.publish-btn {
  padding: 16rpx 32rpx;
  background: #f8f9fa;
  border-radius: 30rpx;
  transition: all 0.3s ease;
}

.publish-btn.active {
  background: #007AFF;
}

.publish-btn.disabled {
  opacity: 0.5;
  pointer-events: none;
}

.publish-btn:active {
  transform: scale(0.95);
}

.publish-text {
  font-size: 28rpx;
  font-weight: 600;
  color: #666;
}

.publish-btn.active .publish-text {
  color: white;
}

/* 内容输入区域 */
.content-section {
  position: relative;
  padding: 32rpx;
  border-bottom: 1rpx solid #f0f0f0;
}

.content-input {
  width: 100%;
  min-height: 400rpx;
  font-size: 32rpx;
  line-height: 1.6;
  color: #1a1a1a;
}

.word-count {
  position: absolute;
  bottom: 16rpx;
  right: 32rpx;
}

.count-text {
  font-size: 24rpx;
  color: #999;
}

.count-text.warning {
  color: #FF3B30;
}

/* 图片上传区域 */
.images-section {
  padding: 32rpx;
  border-bottom: 1rpx solid #f0f0f0;
}

.images-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20rpx;
}

.image-item {
  position: relative;
  aspect-ratio: 1;
  border-radius: 16rpx;
  overflow: hidden;
}

.image {
  width: 100%;
  height: 100%;
  background: #f8f9fa;
}

.delete-btn {
  position: absolute;
  top: 8rpx;
  right: 8rpx;
  width: 40rpx;
  height: 40rpx;
  background: rgba(0, 0, 0, 0.6);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.delete-btn:active {
  background: rgba(0, 0, 0, 0.8);
  transform: scale(0.9);
}

.delete-icon {
  font-size: 24rpx;
  color: white;
  font-weight: 300;
}

.add-image-btn {
  aspect-ratio: 1;
  border: 2rpx dashed #e0e0e0;
  border-radius: 16rpx;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  background: #fafafa;
}

.add-image-btn:active {
  background: #f0f0f0;
  border-color: #007AFF;
}

.add-icon {
  font-size: 48rpx;
  color: #999;
  margin-bottom: 8rpx;
  font-weight: 300;
}

.add-text {
  font-size: 24rpx;
  color: #999;
}

/* 功能选项区域 */
.options-section {
  padding: 32rpx;
}

.option-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 32rpx 0;
  border-bottom: 1rpx solid #f8f9fa;
}

.option-item:last-child {
  border-bottom: none;
}

.option-label {
  flex: 1;
}

.label-text {
  display: block;
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 8rpx;
}

.label-desc {
  display: block;
  font-size: 24rpx;
  color: #999;
}

/* 标签列表 */
.tags-list {
  display: flex;
  gap: 16rpx;
}

.tag-item {
  padding: 16rpx 24rpx;
  border: 2rpx solid #f0f0f0;
  border-radius: 30rpx;
  transition: all 0.3s ease;
}

.tag-item:active {
  transform: scale(0.95);
}

.tag-item.active {
  border-color: transparent;
}

.tag-text {
  font-size: 26rpx;
  font-weight: 500;
  color: #666;
}

.tag-item.active .tag-text {
  color: white;
}

/* 位置选择 */
.location-content {
  flex: 1;
  display: flex;
  justify-content: flex-end;
}

.location-btn {
  display: flex;
  align-items: center;
  padding: 16rpx 24rpx;
  background: #f8f9fa;
  border-radius: 30rpx;
  transition: all 0.3s ease;
  max-width: 300rpx;
}

.location-btn:active {
  background: #e9ecef;
}

.location-btn.has-location {
  background: #e3f2fd;
}

.location-icon {
  font-size: 28rpx;
  margin-right: 12rpx;
}

.location-text {
  font-size: 28rpx;
  color: #666;
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.location-btn.has-location .location-text {
  color: #007AFF;
}

.clear-location {
  width: 32rpx;
  height: 32rpx;
  border-radius: 50%;
  background: #e0e0e0;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-left: 12rpx;
  opacity: 0;
  transition: all 0.3s ease;
}

.clear-location.show {
  opacity: 1;
}

.clear-location:active {
  background: #d0d0d0;
}

.clear-icon {
  font-size: 20rpx;
  color: #666;
  font-weight: 300;
}

/* 开关内容 */
.switch-content {
  margin-left: 24rpx;
}

/* 底部操作栏 */
.bottom-actions {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: white;
  border-top: 1rpx solid #f0f0f0;
  padding: 24rpx 32rpx;
  padding-bottom: calc(24rpx + env(safe-area-inset-bottom));
}

.action-buttons {
  display: flex;
  justify-content: space-around;
  align-items: center;
}

.action-btn {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20rpx 32rpx;
  border-radius: 20rpx;
  transition: all 0.3s ease;
}

.action-btn:active {
  background: #f8f9fa;
  transform: scale(0.95);
}

.action-icon {
  font-size: 40rpx;
  margin-bottom: 8rpx;
}

.action-text {
  font-size: 24rpx;
  color: #666;
}

/* 发布加载遮罩 */
.publish-mask {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
}

.publish-loading {
  background: white;
  padding: 64rpx;
  border-radius: 24rpx;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.loading-spinner {
  width: 80rpx;
  height: 80rpx;
  border: 4rpx solid #f0f0f0;
  border-top: 4rpx solid #007AFF;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 32rpx;
}

.loading-text {
  font-size: 28rpx;
  color: #666;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

===== miniprogram\pages\school-auth\index.js =====

const app = getApp();

Page({
  data: {
    customNavHeight: 0,
    statusBarHeight: 0,
    schoolName: '',
    studentId: '',
    verificationType: '',
    imagePath: '',
    agreed: false,
    uploading: false
  },

  onLoad() {
    this.setData({
      customNavHeight: app.globalData.customNavHeight,
      statusBarHeight: app.globalData.systemInfo.statusBarHeight
    });
  },

  onSchoolNameInput(e) {
    this.setData({ schoolName: e.detail.value });
    this.checkCanSubmit();
  },

  onStudentIdInput(e) {
    this.setData({ studentId: e.detail.value });
    this.checkCanSubmit();
  },

  onSelectVerificationType(e) {
    const type = e.currentTarget.dataset.type;
    this.setData({ verificationType: type });
    this.checkCanSubmit();
  },

  onAgreementChange(e) {
    this.setData({ agreed: e.detail.value.length > 0 });
    this.checkCanSubmit();
  },

  async onChooseImage() {
    try {
      const res = await wx.chooseImage({
        count: 1,
        sizeType: ['compressed'],
        sourceType: ['album', 'camera']
      });

      if (res.tempFilePaths.length > 0) {
        this.setData({ 
          imagePath: res.tempFilePaths[0],
          uploading: true
        });

        // 上传图片到云存储
        const uploadResult = await wx.cloud.uploadFile({
          cloudPath: `verification/${Date.now()}-${Math.random().toString(36).substr(2)}.jpg`,
          filePath: res.tempFilePaths[0],
        });

        this.setData({ 
          cloudImagePath: uploadResult.fileID,
          uploading: false
        });
      }
    } catch (error) {
      console.error('选择图片失败:', error);
      wx.showToast({
        title: '上传失败',
        icon: 'none'
      });
      this.setData({ uploading: false });
    }
  },

  checkCanSubmit() {
    const { schoolName, studentId, verificationType, agreed, imagePath } = this.data;
    const canSubmit = schoolName && studentId && verificationType && agreed && imagePath;
    this.setData({ canSubmit });
  },

  async onSubmitAuth() {
    if (!this.data.canSubmit) return;

    const { schoolName, studentId, verificationType, cloudImagePath } = this.data;

    try {
      wx.showLoading({ title: '提交中...' });

      // 调用认证云函数
      const result = await wx.cloud.callFunction({
        name: 'auth',
        data: {
          action: 'verifySchool',
          schoolName,
          studentId,
          verificationType,
          schoolCode: this.generateSchoolCode(schoolName),
          verificationImage: cloudImagePath
        }
      });

      wx.hideLoading();

      if (result.result.success) {
        wx.showToast({
          title: '认证信息已提交',
          icon: 'success'
        });

        // 返回上一页或跳转到首页
        setTimeout(() => {
          wx.navigateBack();
        }, 1500);
      } else {
        throw new Error(result.result.message);
      }
    } catch (error) {
      console.error('提交认证失败:', error);
      wx.showToast({
        title: '提交失败，请重试',
        icon: 'none'
      });
    }
  },

  generateSchoolCode(schoolName) {
    // 简单的学校代码生成逻辑，实际应该使用标准学校代码
    return schoolName.replace(/[^\u4e00-\u9fa5]/g, '').slice(0, 4) + Math.random().toString(36).substr(2, 4);
  }
});

===== miniprogram\pages\school-auth\index.wxml =====

<view class="school-auth-page">
  <view class="custom-nav" style="height: {{customNavHeight}}px">
    <view class="nav-content" style="height: 44px; padding-top: {{statusBarHeight}}px">
      <text class="nav-title">学校认证</text>
    </view>
  </view>

  <view class="auth-container" style="padding-top: {{customNavHeight + 20}}px">
    <view class="form-section">
      <view class="form-item">
        <text class="label">学校名称</text>
        <input 
          class="input" 
          placeholder="请输入您的学校名称" 
          value="{{schoolName}}"
          bindinput="onSchoolNameInput"
        />
      </view>
      
      <view class="form-item">
        <text class="label">学号</text>
        <input 
          class="input" 
          placeholder="请输入您的学号" 
          value="{{studentId}}"
          bindinput="onStudentIdInput"
        />
      </view>
      
      <view class="form-item">
        <text class="label">认证方式</text>
        <view class="verification-options">
          <view 
            class="option {{verificationType === 'studentCard' ? 'selected' : ''}}"
            bindtap="onSelectVerificationType"
            data-type="studentCard"
          >
            <text class="option-icon">🎓</text>
            <text class="option-text">学生证</text>
          </view>
          <view 
            class="option {{verificationType === 'campusCard' ? 'selected' : ''}}"
            bindtap="onSelectVerificationType"
            data-type="campusCard"
          >
            <text class="option-icon">💳</text>
            <text class="option-text">校园卡</text>
          </view>
          <view 
            class="option {{verificationType === 'admissionLetter' ? 'selected' : ''}}"
            bindtap="onSelectVerificationType"
            data-type="admissionLetter"
          >
            <text class="option-icon">📄</text>
            <text class="option-text">录取通知书</text>
          </view>
        </view>
      </view>
      
      <view class="form-item" wx:if="{{verificationType}}">
        <text class="label">上传{{verificationText}}</text>
        <view class="upload-section">
          <view class="upload-btn" bindtap="onChooseImage">
            <text class="upload-icon">➕</text>
            <text class="upload-text">点击上传</text>
          </view>
          <image 
            class="preview-image" 
            src="{{imagePath}}" 
            mode="aspectFit"
            wx:if="{{imagePath}}"
          />
        </view>
      </view>
    </view>
    
    <view class="agreement-section">
      <checkbox checked="{{agreed}}" bindchange="onAgreementChange" />
      <text class="agreement-text">我承诺所提交的信息真实有效</text>
    </view>
    
    <view class="action-buttons">
      <button 
        class="submit-btn {{canSubmit ? 'active' : ''}}"
        bindtap="onSubmitAuth"
        disabled="{{!canSubmit}}"
      >
        提交认证
      </button>
    </view>
  </view>
</view>

===== miniprogram\pages\school-auth\index.wxss =====

.school-auth-page {
  min-height: 100vh;
  background: #F8F9FA;
}

.auth-container {
  padding: 0 32rpx;
}

.form-section {
  background: white;
  border-radius: 20rpx;
  padding: 32rpx;
  margin-bottom: 24rpx;
}

.form-item {
  margin-bottom: 40rpx;
}

.label {
  display: block;
  font-size: 28rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 16rpx;
}

.input {
  background: #f8f9fa;
  border-radius: 12rpx;
  padding: 24rpx;
  font-size: 28rpx;
}

.verification-options {
  display: flex;
  gap: 20rpx;
}

.option {
  flex: 1;
  padding: 24rpx;
  border: 2rpx solid #f0f0f0;
  border-radius: 12rpx;
  text-align: center;
  transition: all 0.3s ease;
}

.option.selected {
  border-color: #007AFF;
  background: #f0f8ff;
}

.option-icon {
  font-size: 40rpx;
  display: block;
  margin-bottom: 8rpx;
}

.option-text {
  font-size: 24rpx;
  color: #666;
}

.upload-section {
  text-align: center;
}

.upload-btn {
  padding: 60rpx 40rpx;
  border: 2rpx dashed #ddd;
  border-radius: 12rpx;
  background: #fafafa;
}

.upload-icon {
  font-size: 48rpx;
  display: block;
  margin-bottom: 16rpx;
  color: #999;
}

.upload-text {
  font-size: 24rpx;
  color: #999;
}

.preview-image {
  width: 200rpx;
  height: 200rpx;
  border-radius: 8rpx;
  margin-top: 20rpx;
}

.agreement-section {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 40rpx 0;
}

.agreement-text {
  font-size: 24rpx;
  color: #666;
  margin-left: 16rpx;
}

.submit-btn {
  width: 100%;
  padding: 28rpx;
  background: #f8f9fa;
  border-radius: 50rpx;
  text-align: center;
  font-size: 32rpx;
  font-weight: 600;
  color: #999;
}

.submit-btn.active {
  background: #007AFF;
  color: white;
}

===== miniprogram\pages\search\index.js =====

const app = getApp();
const FormatTime = require('../../utils/formatTime.js');

Page({
  data: {
    customNavHeight: 0,
    searchValue: '',
    searchHistory: [],
    hotSearches: [
      { keyword: '科技', count: 1254 },
      { keyword: '美食', count: 987 },
      { keyword: '旅行', count: 856 },
      { keyword: '编程', count: 743 },
      { keyword: '摄影', count: 632 }
    ],
    searchResults: [],
    searching: false,
    hasMore: true,
    page: 1,
    pageSize: 10,
    activeTab: 'post', // post, user, tag
    tabs: [
      { id: 'post', name: '帖子' },
      { id: 'user', name: '用户' },
      { id: 'tag', name: '标签' }
    ]
  },

  onLoad(options) {
    this.setData({
      customNavHeight: app.globalData.customNavHeight
    });

    // 加载搜索历史
    this.loadSearchHistory();
  },

  onShow() {
    // 刷新搜索历史
    this.loadSearchHistory();
  },

  // 加载搜索历史
  loadSearchHistory() {
    const history = wx.getStorageSync('searchHistory') || [];
    this.setData({ searchHistory: history });
  },

  // 保存搜索历史
  saveSearchHistory(keyword) {
    let history = wx.getStorageSync('searchHistory') || [];
    
    // 移除已存在的关键词
    history = history.filter(item => item !== keyword);
    
    // 添加到开头
    history.unshift(keyword);
    
    // 只保留最近10条
    history = history.slice(0, 10);
    
    wx.setStorageSync('searchHistory', history);
    this.setData({ searchHistory: history });
  },

  // 输入搜索内容
  onSearchInput(e) {
    this.setData({
      searchValue: e.detail.value
    });

    // 实时搜索
    if (e.detail.value.trim()) {
      this.debouncedSearch();
    } else {
      this.setData({
        searchResults: [],
        searching: false
      });
    }
  },

  // 防抖搜索
  debouncedSearch: null,

  onReady() {
    // 初始化防抖函数
    this.debouncedSearch = this.debounce(() => {
      this.doSearch();
    }, 300);
  },

  // 防抖函数
  debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  },

  // 执行搜索
  async doSearch() {
    if (!this.data.searchValue.trim()) return;

    this.setData({
      searching: true,
      page: 1,
      searchResults: []
    });

    try {
      const result = await wx.cloud.callFunction({
        name: 'search',
        data: {
          action: 'search',
          keyword: this.data.searchValue,
          type: this.data.activeTab,
          page: this.data.page,
          pageSize: this.data.pageSize
        }
      });

      if (result.result && result.result.success) {
        const { results, hasMore } = result.result.data;
        
        // 格式化结果
        const formattedResults = results.map(item => {
          if (this.data.activeTab === 'post') {
            return {
              ...item,
              createTime: FormatTime.friendlyTime(item.createTime)
            };
          }
          return item;
        });

        this.setData({
          searchResults: formattedResults,
          hasMore: hasMore
        });

        // 保存搜索历史
        this.saveSearchHistory(this.data.searchValue);
      } else {
        throw new Error(result.result.message || '搜索失败');
      }
    } catch (error) {
      console.error('搜索失败:', error);
      app.showError('搜索失败，请重试');
    } finally {
      this.setData({ searching: false });
    }
  },

  // 搜索提交
  onSearchSubmit() {
    if (!this.data.searchValue.trim()) {
      app.showError('请输入搜索内容');
      return;
    }

    this.doSearch();
  },

  // 清除搜索
  onClearSearch() {
    this.setData({
      searchValue: '',
      searchResults: [],
      searching: false
    });
  },

  // 点击历史记录
  onHistoryTap(e) {
    const { keyword } = e.currentTarget.dataset;
    this.setData({
      searchValue: keyword
    });
    this.doSearch();
  },

  // 点击热门搜索
  onHotSearchTap(e) {
    const { keyword } = e.currentTarget.dataset;
    this.setData({
      searchValue: keyword
    });
    this.doSearch();
  },

  // 清除历史记录
  onClearHistory() {
    wx.showModal({
      title: '确认清除',
      content: '确定要清除搜索历史吗？',
      success: (res) => {
        if (res.confirm) {
          wx.removeStorageSync('searchHistory');
          this.setData({ searchHistory: [] });
          app.showSuccess('已清除搜索历史');
        }
      }
    });
  },

  // 切换标签
  onTabTap(e) {
    const { tab } = e.currentTarget.dataset;
    
    if (tab === this.data.activeTab) return;

    this.setData({
      activeTab: tab,
      searchResults: [],
      page: 1
    });

    // 如果有搜索内容，重新搜索
    if (this.data.searchValue.trim()) {
      this.doSearch();
    }
  },

  // 加载更多
  onLoadMore() {
    if (!this.data.hasMore || this.data.searching) return;

    this.setData({
      page: this.data.page + 1
    });
    this.loadMoreResults();
  },

  // 加载更多结果
  async loadMoreResults() {
    this.setData({ searching: true });

    try {
      const result = await wx.cloud.callFunction({
        name: 'search',
        data: {
          action: 'search',
          keyword: this.data.searchValue,
          type: this.data.activeTab,
          page: this.data.page,
          pageSize: this.data.pageSize
        }
      });

      if (result.result && result.result.success) {
        const { results, hasMore } = result.result.data;
        
        const formattedResults = results.map(item => {
          if (this.data.activeTab === 'post') {
            return {
              ...item,
              createTime: FormatTime.friendlyTime(item.createTime)
            };
          }
          return item;
        });

        this.setData({
          searchResults: [...this.data.searchResults, ...formattedResults],
          hasMore: hasMore
        });
      }
    } catch (error) {
      console.error('加载更多失败:', error);
      app.showError('加载失败');
    } finally {
      this.setData({ searching: false });
    }
  },

  // 点击搜索结果
  onResultTap(e) {
    const { item, type } = e.currentTarget.dataset;
    
    switch (type) {
      case 'post':
        wx.navigateTo({
          url: `/pages/post-detail/index?id=${item._id}`
        });
        break;
      case 'user':
        wx.navigateTo({
          url: `/pages/profile/other?id=${item._id}`
        });
        break;
      case 'tag':
        // 跳转到标签页面
        break;
    }
  }
});

===== miniprogram\pages\search\index.json =====

{
  "navigationStyle": "custom",
  "backgroundColor": "#F8F9FA",
  "backgroundTextStyle": "dark",
  "enablePullDownRefresh": false,
  "usingComponents": {
    "post-card": "/components/post-card/post-card"
  }
}

===== miniprogram\pages\search\index.wxml =====

<view class="search-page">
  <!-- 自定义导航栏 -->
  <view class="custom-nav" style="height: {{customNavHeight}}px">
    <view class="nav-content" style="height: 44px; padding-top: {{statusBarHeight}}px">
      <!-- 返回按钮 -->
      <view class="nav-back" bind:tap="onNavBack">
        <text class="back-icon">‹</text>
      </view>
      
      <!-- 搜索框 -->
      <view class="search-box">
        <view class="search-input-wrapper">
          <text class="search-icon">🔍</text>
          <input 
            class="search-input" 
            placeholder="搜索帖子、用户、标签..." 
            value="{{searchValue}}"
            bindinput="onSearchInput"
            bindconfirm="onSearchSubmit"
            focus="{{autoFocus}}"
          />
          <view 
            class="clear-btn {{searchValue ? 'show' : ''}}" 
            bind:tap="onClearSearch"
          >
            <text class="clear-icon">×</text>
          </view>
        </view>
      </view>
    </view>
  </view>

  <view class="search-container" style="padding-top: {{customNavHeight}}px">
    <!-- 搜索标签 -->
    <view class="search-tabs" wx:if="{{searchValue}}">
      <view class="tabs-container">
        <block wx:for="{{tabs}}" wx:key="id">
          <view 
            class="tab-item {{activeTab === item.id ? 'active' : ''}}"
            data-tab="{{item.id}}"
            bind:tap="onTabTap"
          >
            <text class="tab-name">{{item.name}}</text>
            <view class="tab-indicator"></view>
          </view>
        </block>
      </view>
    </view>

    <!-- 搜索结果 -->
    <view class="search-results" wx:if="{{searchValue}}">
      <!-- 帖子结果 -->
      <view class="results-section" wx:if="{{activeTab === 'post'}}">
        <block wx:for="{{searchResults}}" wx:key="_id">
          <post-card 
            postData="{{item}}"
            bind:like="onLikePost"
            bind:comment="onCommentPost"
            bind:avatarTap="onAvatarTap"
          />
        </block>
      </view>

      <!-- 用户结果 -->
      <view class="results-section" wx:if="{{activeTab === 'user'}}">
        <block wx:for="{{searchResults}}" wx:key="_id">
          <view class="user-result-item" data-item="{{item}}" data-type="user" bind:tap="onResultTap">
            <image class="user-avatar" src="{{item.avatarUrl || '/images/default-avatar.png'}}" />
            <view class="user-info">
              <text class="user-name">{{item.nickName}}</text>
              <text class="user-desc">{{item.bio || '这个人很懒，什么都没写'}}</text>
            </view>
            <view class="user-stats">
              <text class="stat-text">{{item.followersCount || 0}} 粉丝</text>
            </view>
          </view>
        </block>
      </view>

      <!-- 标签结果 -->
      <view class="results-section" wx:if="{{activeTab === 'tag'}}">
        <block wx:for="{{searchResults}}" wx:key="_id">
          <view class="tag-result-item" data-item="{{item}}" data-type="tag" bind:tap="onResultTap">
            <view class="tag-icon">#</view>
            <view class="tag-info">
              <text class="tag-name">{{item.name}}</text>
              <text class="tag-count">{{item.postCount || 0}} 篇内容</text>
            </view>
            <view class="tag-hot" wx:if="{{item.isHot}}">
              <text class="hot-text">热门</text>
            </view>
          </view>
        </block>
      </view>

      <!-- 加载状态 -->
      <view class="loading-state" wx:if="{{searching}}">
        <view class="loading-spinner"></view>
        <text class="loading-text">搜索中...</text>
      </view>

      <!-- 没有更多 -->
      <view class="no-more" wx:if="{{!hasMore && searchResults.length > 0}}">
        <text class="no-more-text">没有更多结果了</text>
      </view>

      <!-- 空结果 -->
      <view class="empty-results" wx:if="{{!searching && searchResults.length === 0}}">
        <text class="empty-icon">🔍</text>
        <text class="empty-text">没有找到相关结果</text>
        <text class="empty-desc">换个关键词试试吧</text>
      </view>
    </view>

    <!-- 搜索前状态 -->
    <view class="search-before" wx:if="{{!searchValue}}">
      <!-- 搜索历史 -->
      <view class="history-section" wx:if="{{searchHistory.length > 0}}">
        <view class="section-header">
          <text class="section-title">搜索历史</text>
          <view class="clear-history" bind:tap="onClearHistory">
            <text class="clear-text">清除</text>
          </view>
        </view>
        <view class="history-tags">
          <block wx:for="{{searchHistory}}" wx:key="*this">
            <view 
              class="history-tag" 
              data-keyword="{{item}}"
              bind:tap="onHistoryTap"
            >
              <text class="history-text">{{item}}</text>
            </view>
          </block>
        </view>
      </view>

      <!-- 热门搜索 -->
      <view class="hot-section">
        <view class="section-header">
          <text class="section-title">热门搜索</text>
        </view>
        <view class="hot-list">
          <block wx:for="{{hotSearches}}" wx:key="keyword">
            <view 
              class="hot-item" 
              data-keyword="{{item.keyword}}"
              bind:tap="onHotSearchTap"
            >
              <view class="hot-rank">{{index + 1}}</view>
              <text class="hot-keyword">{{item.keyword}}</text>
              <text class="hot-count">{{item.count}} 搜索</text>
            </view>
          </block>
        </view>
      </view>
    </view>
  </view>
</view>

===== miniprogram\pages\search\index.wxss =====

.search-page {
  min-height: 100vh;
  background: #F8F9FA;
}

.search-container {
  min-height: 100vh;
}

/* 自定义导航栏 */
.custom-nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20rpx);
  border-bottom: 1rpx solid rgba(0, 0, 0, 0.1);
}

.nav-content {
  display: flex;
  align-items: center;
  padding: 0 24rpx;
  gap: 20rpx;
}

.nav-back {
  width: 64rpx;
  height: 64rpx;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.nav-back:active {
  background: #f0f0f0;
}

.back-icon {
  font-size: 40rpx;
  color: #1a1a1a;
  font-weight: 300;
}

.search-box {
  flex: 1;
}

.search-input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  background: #f8f9fa;
  border-radius: 30rpx;
  padding: 0 24rpx;
  height: 64rpx;
}

.search-icon {
  font-size: 28rpx;
  color: #999;
  margin-right: 16rpx;
}

.search-input {
  flex: 1;
  height: 100%;
  font-size: 28rpx;
  color: #1a1a1a;
}

.clear-btn {
  width: 40rpx;
  height: 40rpx;
  border-radius: 50%;
  background: #e0e0e0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: all 0.3s ease;
}

.clear-btn.show {
  opacity: 1;
}

.clear-btn:active {
  background: #d0d0d0;
}

.clear-icon {
  font-size: 24rpx;
  color: #666;
  font-weight: 300;
}

/* 搜索标签 */
.search-tabs {
  background: white;
  border-bottom: 1rpx solid #f0f0f0;
  position: sticky;
  top: 0;
  z-index: 100;
}

.tabs-container {
  display: flex;
  padding: 0 32rpx;
}

.tab-item {
  flex: 1;
  padding: 24rpx 0;
  text-align: center;
  position: relative;
  transition: all 0.3s ease;
}

.tab-item.active .tab-name {
  color: #007AFF;
  font-weight: 600;
}

.tab-name {
  font-size: 30rpx;
  color: #666;
  transition: all 0.3s ease;
}

.tab-indicator {
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 0;
  height: 4rpx;
  background: #007AFF;
  border-radius: 2rpx;
  transition: all 0.3s ease;
}

.tab-item.active .tab-indicator {
  width: 40rpx;
}

/* 搜索结果 */
.results-section {
  padding-bottom: 40rpx;
}

/* 用户结果项 */
.user-result-item {
  display: flex;
  align-items: center;
  padding: 32rpx;
  background: white;
  margin: 0 24rpx 16rpx;
  border-radius: 20rpx;
  box-shadow: 0 4rpx 20rpx rgba(0, 0, 0, 0.06);
  transition: all 0.3s ease;
}

.user-result-item:active {
  transform: scale(0.98);
  box-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.1);
}

.user-avatar {
  width: 96rpx;
  height: 96rpx;
  border-radius: 50%;
  margin-right: 24rpx;
}

.user-info {
  flex: 1;
}

.user-name {
  display: block;
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 8rpx;
}

.user-desc {
  display: block;
  font-size: 26rpx;
  color: #666;
}

.user-stats {
  margin-left: 24rpx;
}

.stat-text {
  font-size: 24rpx;
  color: #999;
}

/* 标签结果项 */
.tag-result-item {
  display: flex;
  align-items: center;
  padding: 32rpx;
  background: white;
  margin: 0 24rpx 16rpx;
  border-radius: 20rpx;
  box-shadow: 0 4rpx 20rpx rgba(0, 0, 0, 0.06);
  transition: all 0.3s ease;
}

.tag-result-item:active {
  transform: scale(0.98);
}

.tag-icon {
  font-size: 40rpx;
  color: #007AFF;
  margin-right: 20rpx;
}

.tag-info {
  flex: 1;
}

.tag-name {
  display: block;
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 8rpx;
}

.tag-count {
  display: block;
  font-size: 26rpx;
  color: #666;
}

.tag-hot {
  background: linear-gradient(135deg, #FF3B30 0%, #FF9500 100%);
  padding: 8rpx 16rpx;
  border-radius: 12rpx;
}

.hot-text {
  font-size: 20rpx;
  color: white;
  font-weight: 600;
}

/* 搜索前状态 */
.search-before {
  padding: 40rpx 24rpx;
}

/* 历史记录 */
.history-section {
  margin-bottom: 60rpx;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 32rpx;
}

.section-title {
  font-size: 32rpx;
  font-weight: 600;
  color: #1a1a1a;
}

.clear-history {
  padding: 12rpx 20rpx;
  background: #f8f9fa;
  border-radius: 16rpx;
  transition: all 0.3s ease;
}

.clear-history:active {
  background: #e9ecef;
}

.clear-text {
  font-size: 24rpx;
  color: #666;
}

.history-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 20rpx;
}

.history-tag {
  background: white;
  padding: 20rpx 32rpx;
  border-radius: 30rpx;
  box-shadow: 0 4rpx 20rpx rgba(0, 0, 0, 0.06);
  transition: all 0.3s ease;
}

.history-tag:active {
  transform: scale(0.95);
  box-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.1);
}

.history-text {
  font-size: 28rpx;
  color: #333;
}

/* 热门搜索 */
.hot-section {
  margin-bottom: 40rpx;
}

.hot-list {
  display: flex;
  flex-direction: column;
  gap: 16rpx;
}

.hot-item {
  display: flex;
  align-items: center;
  padding: 24rpx;
  background: white;
  border-radius: 16rpx;
  box-shadow: 0 4rpx 20rpx rgba(0, 0, 0, 0.06);
  transition: all 0.3s ease;
}

.hot-item:active {
  transform: scale(0.98);
}

.hot-rank {
  width: 48rpx;
  height: 48rpx;
  background: linear-gradient(135deg, #007AFF 0%, #5856D6 100%);
  border-radius: 12rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 24rpx;
  font-size: 24rpx;
  color: white;
  font-weight: 600;
}

.hot-keyword {
  flex: 1;
  font-size: 30rpx;
  color: #1a1a1a;
  font-weight: 500;
}

.hot-count {
  font-size: 24rpx;
  color: #999;
}

/* 加载状态 */
.loading-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 80rpx 0;
}

.loading-spinner {
  width: 48rpx;
  height: 48rpx;
  border: 4rpx solid #f0f0f0;
  border-top: 4rpx solid #007AFF;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 24rpx;
}

.loading-text {
  font-size: 28rpx;
  color: #999;
}

/* 没有更多 */
.no-more {
  text-align: center;
  padding: 60rpx 0;
}

.no-more-text {
  font-size: 28rpx;
  color: #999;
}

/* 空结果 */
.empty-results {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 200rpx 0;
  text-align: center;
}

.empty-icon {
  font-size: 120rpx;
  margin-bottom: 32rpx;
  opacity: 0.5;
}

.empty-text {
  font-size: 32rpx;
  color: #666;
  margin-bottom: 16rpx;
}

.empty-desc {
  font-size: 28rpx;
  color: #999;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

===== miniprogram\utils\formatTime.js =====

// utils/formatTime.js

/**
 * 时间格式化工具类
 * 提供各种时间格式化和处理功能
 */

class FormatTime {
  /**
   * 格式化时间为相对时间（如：刚刚、5分钟前）
   * @param {string|number|Date} timestamp - 时间戳或日期字符串
   * @param {boolean} withSuffix - 是否显示后缀
   * @returns {string} 格式化后的时间字符串
   */
  static relativeTime(timestamp, withSuffix = true) {
    if (!timestamp) return '';
    
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    
    // 时间差计算
    const minute = 60 * 1000;
    const hour = minute * 60;
    const day = hour * 24;
    const week = day * 7;
    const month = day * 30;
    const year = day * 365;
    
    if (diff < minute) {
      return withSuffix ? '刚刚' : '现在';
    } else if (diff < hour) {
      const minutes = Math.floor(diff / minute);
      return withSuffix ? `${minutes}分钟前` : `${minutes}分钟`;
    } else if (diff < day) {
      const hours = Math.floor(diff / hour);
      return withSuffix ? `${hours}小时前` : `${hours}小时`;
    } else if (diff < week) {
      const days = Math.floor(diff / day);
      return withSuffix ? `${days}天前` : `${days}天`;
    } else if (diff < month) {
      const weeks = Math.floor(diff / week);
      return withSuffix ? `${weeks}周前` : `${weeks}周`;
    } else if (diff < year) {
      const months = Math.floor(diff / month);
      return withSuffix ? `${months}个月前` : `${months}个月`;
    } else {
      const years = Math.floor(diff / year);
      return withSuffix ? `${years}年前` : `${years}年`;
    }
  }

  /**
   * 格式化时间为指定格式
   * @param {string|number|Date} timestamp - 时间戳或日期字符串
   * @param {string} format - 格式字符串
   * @returns {string} 格式化后的时间字符串
   */
  static format(timestamp, format = 'YYYY-MM-DD HH:mm:ss') {
    if (!timestamp) return '';
    
    const date = new Date(timestamp);
    
    if (isNaN(date.getTime())) {
      return '';
    }
    
    const formatMap = {
      'YYYY': date.getFullYear(),
      'MM': String(date.getMonth() + 1).padStart(2, '0'),
      'DD': String(date.getDate()).padStart(2, '0'),
      'HH': String(date.getHours()).padStart(2, '0'),
      'mm': String(date.getMinutes()).padStart(2, '0'),
      'ss': String(date.getSeconds()).padStart(2, '0'),
      'M': date.getMonth() + 1,
      'D': date.getDate(),
      'H': date.getHours(),
      'm': date.getMinutes(),
      's': date.getSeconds()
    };
    
    return format.replace(/(YYYY|MM|DD|HH|mm|ss|M|D|H|m|s)/g, (match) => {
      return formatMap[match] || match;
    });
  }

  /**
   * 格式化时间为聊天显示格式
   * @param {string|number|Date} timestamp - 时间戳或日期字符串
   * @returns {string} 聊天格式时间
   */
  static chatTime(timestamp) {
    if (!timestamp) return '';
    
    const date = new Date(timestamp);
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
    
    if (date >= today) {
      // 今天
      return this.format(timestamp, 'HH:mm');
    } else if (date >= yesterday) {
      // 昨天
      return `昨天 ${this.format(timestamp, 'HH:mm')}`;
    } else if (date >= weekAgo) {
      // 一周内
      const weekDays = ['日', '一', '二', '三', '四', '五', '六'];
      const dayOfWeek = weekDays[date.getDay()];
      return `周${dayOfWeek} ${this.format(timestamp, 'HH:mm')}`;
    } else {
      // 更早
      return this.format(timestamp, 'MM-DD HH:mm');
    }
  }

  /**
   * 格式化时间为日期显示格式
   * @param {string|number|Date} timestamp - 时间戳或日期字符串
   * @returns {string} 日期格式时间
   */
  static dateTime(timestamp) {
    if (!timestamp) return '';
    
    const date = new Date(timestamp);
    const now = new Date();
    const isSameYear = date.getFullYear() === now.getFullYear();
    
    if (isSameYear) {
      return this.format(timestamp, 'MM-DD HH:mm');
    } else {
      return this.format(timestamp, 'YYYY-MM-DD HH:mm');
    }
  }

  /**
   * 获取时间的友好显示
   * @param {string|number|Date} timestamp - 时间戳或日期字符串
   * @returns {string} 友好时间显示
   */
  static friendlyTime(timestamp) {
    if (!timestamp) return '';
    
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const day = 24 * 60 * 60 * 1000;
    
    if (diff < day) {
      return this.relativeTime(timestamp);
    } else if (diff < 7 * day) {
      const days = Math.floor(diff / day);
      return `${days}天前`;
    } else {
      return this.format(timestamp, 'YYYY年MM月DD日');
    }
  }

  /**
   * 计算剩余时间
   * @param {string|number|Date} endTime - 结束时间
   * @returns {Object} 剩余时间对象
   */
  static countDown(endTime) {
    if (!endTime) return null;
    
    const end = new Date(endTime).getTime();
    const now = new Date().getTime();
    const diff = end - now;
    
    if (diff <= 0) {
      return {
        days: 0,
        hours: 0,
        minutes: 0,
        seconds: 0,
        expired: true
      };
    }
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);
    
    return {
      days,
      hours,
      minutes,
      seconds,
      expired: false
    };
  }

  /**
   * 格式化时长（秒转为时分秒）
   * @param {number} seconds - 秒数
   * @returns {string} 格式化后的时长
   */
  static formatDuration(seconds) {
    if (!seconds && seconds !== 0) return '';
    
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    
    if (hours > 0) {
      return `${hours}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    } else {
      return `${minutes}:${String(secs).padStart(2, '0')}`;
    }
  }

  /**
   * 获取星期几
   * @param {string|number|Date} timestamp - 时间戳或日期字符串
   * @param {boolean} withWeek - 是否包含"星期"前缀
   * @returns {string} 星期几
   */
  static getWeekDay(timestamp, withWeek = true) {
    if (!timestamp) return '';
    
    const date = new Date(timestamp);
    const weekDays = ['日', '一', '二', '三', '四', '五', '六'];
    const day = weekDays[date.getDay()];
    
    return withWeek ? `星期${day}` : day;
  }

  /**
   * 判断是否为今天
   * @param {string|number|Date} timestamp - 时间戳或日期字符串
   * @returns {boolean} 是否为今天
   */
  static isToday(timestamp) {
    if (!timestamp) return false;
    
    const date = new Date(timestamp);
    const today = new Date();
    
    return date.getDate() === today.getDate() &&
           date.getMonth() === today.getMonth() &&
           date.getFullYear() === today.getFullYear();
  }

  /**
   * 判断是否为今年
   * @param {string|number|Date} timestamp - 时间戳或日期字符串
   * @returns {boolean} 是否为今年
   */
  static isThisYear(timestamp) {
    if (!timestamp) return false;
    
    const date = new Date(timestamp);
    const today = new Date();
    
    return date.getFullYear() === today.getFullYear();
  }
}

// 导出实例
module.exports = FormatTime;
